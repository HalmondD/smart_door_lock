
smart_door_lock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003558  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e8  080036e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080036e8  080036e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036e8  080036e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e8  080036e8  000136e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036ec  080036ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080036fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080036fc  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009c00  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001da1  00000000  00000000  00029c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a30  00000000  00000000  0002ba20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007c1  00000000  00000000  0002c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c06  00000000  00000000  0002cc11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d017  00000000  00000000  00043817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080f6d  00000000  00000000  0005082e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028ac  00000000  00000000  000d179c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d4048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800364c 	.word	0x0800364c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800364c 	.word	0x0800364c

0800014c <app_loop>:
static void welcome_lcd(struct UID* input_uid);
static uint8_t turn_nibble_to_ascii(uint8_t nibble_data);
*/

void app_loop(SPI_HandleTypeDef* hspi2, I2C_HandleTypeDef* hi2c1)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	struct UID input_uid;
	rfid_rc522_init(hspi2);
 8000156:	6878      	ldr	r0, [r7, #4]
 8000158:	f000 fe78 	bl	8000e4c <rfid_rc522_init>

	lcd_1602_i2c_init(hi2c1);
 800015c:	6838      	ldr	r0, [r7, #0]
 800015e:	f000 fa17 	bl	8000590 <lcd_1602_i2c_init>

	while (true)
	{
		while (rfid_rc522_wait_for_card() != true)
 8000162:	e003      	b.n	800016c <app_loop+0x20>
			gettick_delay_ms(300);
 8000164:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000168:	f000 fc6f 	bl	8000a4a <gettick_delay_ms>
		while (rfid_rc522_wait_for_card() != true)
 800016c:	f001 f96d 	bl	800144a <rfid_rc522_wait_for_card>
 8000170:	4603      	mov	r3, r0
 8000172:	2b01      	cmp	r3, #1
 8000174:	d1f6      	bne.n	8000164 <app_loop+0x18>
		
		rfid_rc522_read_serial(&input_uid);
 8000176:	f107 0308 	add.w	r3, r7, #8
 800017a:	4618      	mov	r0, r3
 800017c:	f001 f822 	bl	80011c4 <rfid_rc522_read_serial>

		if (check_uid_data(&input_uid) == false)
 8000180:	f107 0308 	add.w	r3, r7, #8
 8000184:	4618      	mov	r0, r3
 8000186:	f000 f813 	bl	80001b0 <check_uid_data>
 800018a:	4603      	mov	r3, r0
 800018c:	f083 0301 	eor.w	r3, r3, #1
 8000190:	b2db      	uxtb	r3, r3
 8000192:	2b00      	cmp	r3, #0
 8000194:	d106      	bne.n	80001a4 <app_loop+0x58>
			break;

		input_password();
 8000196:	f000 f843 	bl	8000220 <input_password>
		gettick_delay_ms(2000);
 800019a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800019e:	f000 fc54 	bl	8000a4a <gettick_delay_ms>
		while (rfid_rc522_wait_for_card() != true)
 80001a2:	e7e3      	b.n	800016c <app_loop+0x20>
			break;
 80001a4:	bf00      	nop
	}
}
 80001a6:	bf00      	nop
 80001a8:	3710      	adds	r7, #16
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bd80      	pop	{r7, pc}
	...

080001b0 <check_uid_data>:

static bool check_uid_data(struct UID* input_uid)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b084      	sub	sp, #16
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	uint8_t master_uid_data_array[4] = {0x00, 0x47, 0xE6, 0x1E};
 80001b8:	4b17      	ldr	r3, [pc, #92]	; (8000218 <check_uid_data+0x68>)
 80001ba:	60bb      	str	r3, [r7, #8]
	uint8_t uid_data_index = 0;
 80001bc:	2300      	movs	r3, #0
 80001be:	73fb      	strb	r3, [r7, #15]

	for (uid_data_index = 0; uid_data_index <= 3; uid_data_index++)
 80001c0:	2300      	movs	r3, #0
 80001c2:	73fb      	strb	r3, [r7, #15]
 80001c4:	e020      	b.n	8000208 <check_uid_data+0x58>
	{
		if (input_uid->data_array[uid_data_index] != master_uid_data_array[uid_data_index])
 80001c6:	7bfb      	ldrb	r3, [r7, #15]
 80001c8:	687a      	ldr	r2, [r7, #4]
 80001ca:	4413      	add	r3, r2
 80001cc:	785a      	ldrb	r2, [r3, #1]
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	3310      	adds	r3, #16
 80001d2:	443b      	add	r3, r7
 80001d4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80001d8:	429a      	cmp	r2, r3
 80001da:	d012      	beq.n	8000202 <check_uid_data+0x52>
		{
			control_lcd_and_backlight(ENABLE);
 80001dc:	2001      	movs	r0, #1
 80001de:	f000 f8cd 	bl	800037c <control_lcd_and_backlight>

			lcd_1602_i2c_set_cursor_position(1, 0);
 80001e2:	2100      	movs	r1, #0
 80001e4:	2001      	movs	r0, #1
 80001e6:	f000 fac3 	bl	8000770 <lcd_1602_i2c_set_cursor_position>
			lcd_1602_i2c_print_string("Wrong Card!");
 80001ea:	480c      	ldr	r0, [pc, #48]	; (800021c <check_uid_data+0x6c>)
 80001ec:	f000 fa6d 	bl	80006ca <lcd_1602_i2c_print_string>
			gettick_delay_ms(2000);
 80001f0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001f4:	f000 fc29 	bl	8000a4a <gettick_delay_ms>

			control_lcd_and_backlight(DISABLE);
 80001f8:	2000      	movs	r0, #0
 80001fa:	f000 f8bf 	bl	800037c <control_lcd_and_backlight>
			return false;
 80001fe:	2300      	movs	r3, #0
 8000200:	e006      	b.n	8000210 <check_uid_data+0x60>
	for (uid_data_index = 0; uid_data_index <= 3; uid_data_index++)
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	3301      	adds	r3, #1
 8000206:	73fb      	strb	r3, [r7, #15]
 8000208:	7bfb      	ldrb	r3, [r7, #15]
 800020a:	2b03      	cmp	r3, #3
 800020c:	d9db      	bls.n	80001c6 <check_uid_data+0x16>
		}
	}

	return true;
 800020e:	2301      	movs	r3, #1
}
 8000210:	4618      	mov	r0, r3
 8000212:	3710      	adds	r7, #16
 8000214:	46bd      	mov	sp, r7
 8000216:	bd80      	pop	{r7, pc}
 8000218:	1ee64700 	.word	0x1ee64700
 800021c:	08003664 	.word	0x08003664

08000220 <input_password>:

static void input_password(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
	uint8_t gia_tri_phim_nhan;
	char	input_password_array[PASSWORD_COUNT];
	char	master_password_array[PASSWORD_COUNT] = {"1256"};
 8000226:	4b50      	ldr	r3, [pc, #320]	; (8000368 <input_password+0x148>)
 8000228:	607b      	str	r3, [r7, #4]
	uint8_t password_index = 0;
 800022a:	2300      	movs	r3, #0
 800022c:	70fb      	strb	r3, [r7, #3]
	uint8_t	input_password_count = 0;
 800022e:	2300      	movs	r3, #0
 8000230:	70bb      	strb	r3, [r7, #2]
	bool	is_password_right = false;
 8000232:	2300      	movs	r3, #0
 8000234:	73fb      	strb	r3, [r7, #15]

	do
	{
		control_lcd_and_backlight(ENABLE);
 8000236:	2001      	movs	r0, #1
 8000238:	f000 f8a0 	bl	800037c <control_lcd_and_backlight>

		lcd_1602_i2c_set_cursor_position(1, 0);
 800023c:	2100      	movs	r1, #0
 800023e:	2001      	movs	r0, #1
 8000240:	f000 fa96 	bl	8000770 <lcd_1602_i2c_set_cursor_position>
		lcd_1602_i2c_print_string("Input Password:");
 8000244:	4849      	ldr	r0, [pc, #292]	; (800036c <input_password+0x14c>)
 8000246:	f000 fa40 	bl	80006ca <lcd_1602_i2c_print_string>

		lcd_1602_i2c_set_cursor_position(2, 0);
 800024a:	2100      	movs	r1, #0
 800024c:	2002      	movs	r0, #2
 800024e:	f000 fa8f 	bl	8000770 <lcd_1602_i2c_set_cursor_position>

		while ((gia_tri_phim_nhan = keypad_4x4_return_gia_tri_phim_nhan()) != '*')
 8000252:	e03a      	b.n	80002ca <input_password+0xaa>
		{
			input_password_count++;
 8000254:	78bb      	ldrb	r3, [r7, #2]
 8000256:	3301      	adds	r3, #1
 8000258:	b2db      	uxtb	r3, r3
 800025a:	70bb      	strb	r3, [r7, #2]

			if (input_password_count > 15)
 800025c:	78bb      	ldrb	r3, [r7, #2]
 800025e:	2b0f      	cmp	r3, #15
 8000260:	d914      	bls.n	800028c <input_password+0x6c>
			{
				delete_password(input_password_array, &password_index, &input_password_count);
 8000262:	1cba      	adds	r2, r7, #2
 8000264:	1cf9      	adds	r1, r7, #3
 8000266:	f107 0308 	add.w	r3, r7, #8
 800026a:	4618      	mov	r0, r3
 800026c:	f000 f8c9 	bl	8000402 <delete_password>

				clear_display_and_print("Too Long!", 2000);
 8000270:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000274:	483e      	ldr	r0, [pc, #248]	; (8000370 <input_password+0x150>)
 8000276:	f000 f8a6 	bl	80003c6 <clear_display_and_print>
				clear_display_and_print("Input Password:", 0);
 800027a:	2100      	movs	r1, #0
 800027c:	483b      	ldr	r0, [pc, #236]	; (800036c <input_password+0x14c>)
 800027e:	f000 f8a2 	bl	80003c6 <clear_display_and_print>
				lcd_1602_i2c_set_cursor_position(2, 0);
 8000282:	2100      	movs	r1, #0
 8000284:	2002      	movs	r0, #2
 8000286:	f000 fa73 	bl	8000770 <lcd_1602_i2c_set_cursor_position>

				continue;
 800028a:	e01e      	b.n	80002ca <input_password+0xaa>
			}

			input_password_array[password_index] = gia_tri_phim_nhan;
 800028c:	78fb      	ldrb	r3, [r7, #3]
 800028e:	3310      	adds	r3, #16
 8000290:	443b      	add	r3, r7
 8000292:	7bba      	ldrb	r2, [r7, #14]
 8000294:	f803 2c08 	strb.w	r2, [r3, #-8]
			password_index++;
 8000298:	78fb      	ldrb	r3, [r7, #3]
 800029a:	3301      	adds	r3, #1
 800029c:	b2db      	uxtb	r3, r3
 800029e:	70fb      	strb	r3, [r7, #3]

			lcd_1602_i2c_write_data('*');
 80002a0:	202a      	movs	r0, #42	; 0x2a
 80002a2:	f000 f9e9 	bl	8000678 <lcd_1602_i2c_write_data>

			if (gia_tri_phim_nhan == '#')
 80002a6:	7bbb      	ldrb	r3, [r7, #14]
 80002a8:	2b23      	cmp	r3, #35	; 0x23
 80002aa:	d10e      	bne.n	80002ca <input_password+0xaa>
			{
				delete_password(input_password_array, &password_index, &input_password_count);
 80002ac:	1cba      	adds	r2, r7, #2
 80002ae:	1cf9      	adds	r1, r7, #3
 80002b0:	f107 0308 	add.w	r3, r7, #8
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f8a4 	bl	8000402 <delete_password>

				clear_display_and_print("Input Password:", 0);
 80002ba:	2100      	movs	r1, #0
 80002bc:	482b      	ldr	r0, [pc, #172]	; (800036c <input_password+0x14c>)
 80002be:	f000 f882 	bl	80003c6 <clear_display_and_print>
				lcd_1602_i2c_set_cursor_position(2, 0);
 80002c2:	2100      	movs	r1, #0
 80002c4:	2002      	movs	r0, #2
 80002c6:	f000 fa53 	bl	8000770 <lcd_1602_i2c_set_cursor_position>
		while ((gia_tri_phim_nhan = keypad_4x4_return_gia_tri_phim_nhan()) != '*')
 80002ca:	f000 f8bb 	bl	8000444 <keypad_4x4_return_gia_tri_phim_nhan>
 80002ce:	4603      	mov	r3, r0
 80002d0:	73bb      	strb	r3, [r7, #14]
 80002d2:	7bbb      	ldrb	r3, [r7, #14]
 80002d4:	2b2a      	cmp	r3, #42	; 0x2a
 80002d6:	d1bd      	bne.n	8000254 <input_password+0x34>
			}
		}

		for (password_index = 0; password_index <= PASSWORD_COUNT - 1; password_index++)
 80002d8:	2300      	movs	r3, #0
 80002da:	70fb      	strb	r3, [r7, #3]
 80002dc:	e02d      	b.n	800033a <input_password+0x11a>
		{
			if ((master_password_array[password_index] != input_password_array[password_index]) | (input_password_count > PASSWORD_COUNT))
 80002de:	78fb      	ldrb	r3, [r7, #3]
 80002e0:	3310      	adds	r3, #16
 80002e2:	443b      	add	r3, r7
 80002e4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	3310      	adds	r3, #16
 80002ec:	443b      	add	r3, r7
 80002ee:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	bf14      	ite	ne
 80002f6:	2301      	movne	r3, #1
 80002f8:	2300      	moveq	r3, #0
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	78bb      	ldrb	r3, [r7, #2]
 80002fe:	2b04      	cmp	r3, #4
 8000300:	bf8c      	ite	hi
 8000302:	2301      	movhi	r3, #1
 8000304:	2300      	movls	r3, #0
 8000306:	b2db      	uxtb	r3, r3
 8000308:	4313      	orrs	r3, r2
 800030a:	b2db      	uxtb	r3, r3
 800030c:	2b00      	cmp	r3, #0
 800030e:	d00e      	beq.n	800032e <input_password+0x10e>
			{
				delete_password(input_password_array, &password_index, &input_password_count);
 8000310:	1cba      	adds	r2, r7, #2
 8000312:	1cf9      	adds	r1, r7, #3
 8000314:	f107 0308 	add.w	r3, r7, #8
 8000318:	4618      	mov	r0, r3
 800031a:	f000 f872 	bl	8000402 <delete_password>
				is_password_right = false;
 800031e:	2300      	movs	r3, #0
 8000320:	73fb      	strb	r3, [r7, #15]

				clear_display_and_print("Wrong Password!", 2000);
 8000322:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000326:	4813      	ldr	r0, [pc, #76]	; (8000374 <input_password+0x154>)
 8000328:	f000 f84d 	bl	80003c6 <clear_display_and_print>

				break;
 800032c:	e008      	b.n	8000340 <input_password+0x120>
			}
			else
				is_password_right = true;
 800032e:	2301      	movs	r3, #1
 8000330:	73fb      	strb	r3, [r7, #15]
		for (password_index = 0; password_index <= PASSWORD_COUNT - 1; password_index++)
 8000332:	78fb      	ldrb	r3, [r7, #3]
 8000334:	3301      	adds	r3, #1
 8000336:	b2db      	uxtb	r3, r3
 8000338:	70fb      	strb	r3, [r7, #3]
 800033a:	78fb      	ldrb	r3, [r7, #3]
 800033c:	2b03      	cmp	r3, #3
 800033e:	d9ce      	bls.n	80002de <input_password+0xbe>
		}
	}
	while (is_password_right == false);
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	f083 0301 	eor.w	r3, r3, #1
 8000346:	b2db      	uxtb	r3, r3
 8000348:	2b00      	cmp	r3, #0
 800034a:	f47f af74 	bne.w	8000236 <input_password+0x16>

	clear_display_and_print("Door Open", 2000);
 800034e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000352:	4809      	ldr	r0, [pc, #36]	; (8000378 <input_password+0x158>)
 8000354:	f000 f837 	bl	80003c6 <clear_display_and_print>
	control_lcd_and_backlight(DISABLE);
 8000358:	2000      	movs	r0, #0
 800035a:	f000 f80f 	bl	800037c <control_lcd_and_backlight>
}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	36353231 	.word	0x36353231
 800036c:	08003670 	.word	0x08003670
 8000370:	08003680 	.word	0x08003680
 8000374:	0800368c 	.word	0x0800368c
 8000378:	0800369c 	.word	0x0800369c

0800037c <control_lcd_and_backlight>:

static void control_lcd_and_backlight(bool control_state)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	4603      	mov	r3, r0
 8000384:	71fb      	strb	r3, [r7, #7]
	lcd_1602_i2c_write_instruction(CLEAR_DISPLAY);
 8000386:	2001      	movs	r0, #1
 8000388:	f000 f956 	bl	8000638 <lcd_1602_i2c_write_instruction>
	gettick_delay_ms(2);
 800038c:	2002      	movs	r0, #2
 800038e:	f000 fb5c 	bl	8000a4a <gettick_delay_ms>

	if (control_state == ENABLE)
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d009      	beq.n	80003ac <control_lcd_and_backlight+0x30>
	{
		lcd_1602_i2c_control_backlight(BACKLIGHT_ON);
 8000398:	2008      	movs	r0, #8
 800039a:	f000 fa0f 	bl	80007bc <lcd_1602_i2c_control_backlight>
		lcd_1602_i2c_write_instruction(LCD_ON);
 800039e:	200c      	movs	r0, #12
 80003a0:	f000 f94a 	bl	8000638 <lcd_1602_i2c_write_instruction>
		gettick_delay_ms(1);
 80003a4:	2001      	movs	r0, #1
 80003a6:	f000 fb50 	bl	8000a4a <gettick_delay_ms>
	{
		lcd_1602_i2c_control_backlight(BACKLIGHT_OFF);
		lcd_1602_i2c_write_instruction(LCD_OFF);
		gettick_delay_ms(1);
	}
}
 80003aa:	e008      	b.n	80003be <control_lcd_and_backlight+0x42>
		lcd_1602_i2c_control_backlight(BACKLIGHT_OFF);
 80003ac:	2000      	movs	r0, #0
 80003ae:	f000 fa05 	bl	80007bc <lcd_1602_i2c_control_backlight>
		lcd_1602_i2c_write_instruction(LCD_OFF);
 80003b2:	2008      	movs	r0, #8
 80003b4:	f000 f940 	bl	8000638 <lcd_1602_i2c_write_instruction>
		gettick_delay_ms(1);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f000 fb46 	bl	8000a4a <gettick_delay_ms>
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <clear_display_and_print>:

static void clear_display_and_print(const char string_array[], uint16_t delay_time_ms)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b082      	sub	sp, #8
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
 80003ce:	460b      	mov	r3, r1
 80003d0:	807b      	strh	r3, [r7, #2]
	lcd_1602_i2c_write_instruction(CLEAR_DISPLAY);
 80003d2:	2001      	movs	r0, #1
 80003d4:	f000 f930 	bl	8000638 <lcd_1602_i2c_write_instruction>
	gettick_delay_ms(2);
 80003d8:	2002      	movs	r0, #2
 80003da:	f000 fb36 	bl	8000a4a <gettick_delay_ms>
	lcd_1602_i2c_set_cursor_position(1, 0);
 80003de:	2100      	movs	r1, #0
 80003e0:	2001      	movs	r0, #1
 80003e2:	f000 f9c5 	bl	8000770 <lcd_1602_i2c_set_cursor_position>

	lcd_1602_i2c_print_string(string_array);
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f000 f96f 	bl	80006ca <lcd_1602_i2c_print_string>

	if (delay_time_ms != 0)
 80003ec:	887b      	ldrh	r3, [r7, #2]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d003      	beq.n	80003fa <clear_display_and_print+0x34>
		gettick_delay_ms(delay_time_ms);
 80003f2:	887b      	ldrh	r3, [r7, #2]
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fb28 	bl	8000a4a <gettick_delay_ms>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <delete_password>:

static void delete_password(char* input_password_array, uint8_t* password_index, uint8_t* input_password_count)
{
 8000402:	b480      	push	{r7}
 8000404:	b087      	sub	sp, #28
 8000406:	af00      	add	r7, sp, #0
 8000408:	60f8      	str	r0, [r7, #12]
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
	*password_index = 0;
 800040e:	68bb      	ldr	r3, [r7, #8]
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
	*input_password_count = 0;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PASSWORD_COUNT; i++)
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
 800041e:	e007      	b.n	8000430 <delete_password+0x2e>
	{
		input_password_array[i] = 0;
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	4413      	add	r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PASSWORD_COUNT; i++)
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	3301      	adds	r3, #1
 800042e:	617b      	str	r3, [r7, #20]
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	2b03      	cmp	r3, #3
 8000434:	ddf4      	ble.n	8000420 <delete_password+0x1e>
	}
}
 8000436:	bf00      	nop
 8000438:	bf00      	nop
 800043a:	371c      	adds	r7, #28
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
	...

08000444 <keypad_4x4_return_gia_tri_phim_nhan>:

static void check_trang_thai_phim(bool *phim_co_nhan, uint8_t *gia_tri_phim_nhan, uint8_t *to_hop_phim);
static void doc_gia_tri_phim(uint8_t vi_tri_cot, uint32_t trang_thai_hang, uint8_t *gia_tri_phim_nhan, uint8_t *to_hop_phim);

uint8_t keypad_4x4_return_gia_tri_phim_nhan(void)
{
 8000444:	b590      	push	{r4, r7, lr}
 8000446:	b087      	sub	sp, #28
 8000448:	af00      	add	r7, sp, #0
	uint8_t gia_tri_phim_nhan;
	uint8_t to_hop_phim [16] = {'1', '4', '7', '*', '2', '5', '8', '0', '3', '6', '9', '#', 'A', 'B', 'C', 'D'};
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <keypad_4x4_return_gia_tri_phim_nhan+0x8c>)
 800044c:	1d3c      	adds	r4, r7, #4
 800044e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	bool phim_co_nhan = true;
 8000454:	2301      	movs	r3, #1
 8000456:	70fb      	strb	r3, [r7, #3]

	for (int8_t nhan_count = 1; nhan_count <= 50; nhan_count++)
 8000458:	2301      	movs	r3, #1
 800045a:	75fb      	strb	r3, [r7, #23]
 800045c:	e015      	b.n	800048a <keypad_4x4_return_gia_tri_phim_nhan+0x46>
	{
		check_trang_thai_phim(&phim_co_nhan, &gia_tri_phim_nhan, to_hop_phim);
 800045e:	1d3a      	adds	r2, r7, #4
 8000460:	f107 0115 	add.w	r1, r7, #21
 8000464:	1cfb      	adds	r3, r7, #3
 8000466:	4618      	mov	r0, r3
 8000468:	f000 f834 	bl	80004d4 <check_trang_thai_phim>

		if (phim_co_nhan == false) {
 800046c:	78fb      	ldrb	r3, [r7, #3]
 800046e:	f083 0301 	eor.w	r3, r3, #1
 8000472:	b2db      	uxtb	r3, r3
 8000474:	2b00      	cmp	r3, #0
 8000476:	d002      	beq.n	800047e <keypad_4x4_return_gia_tri_phim_nhan+0x3a>
			nhan_count = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	75fb      	strb	r3, [r7, #23]
			continue;
 800047c:	bf00      	nop
	for (int8_t nhan_count = 1; nhan_count <= 50; nhan_count++)
 800047e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	3301      	adds	r3, #1
 8000486:	b2db      	uxtb	r3, r3
 8000488:	75fb      	strb	r3, [r7, #23]
 800048a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800048e:	2b32      	cmp	r3, #50	; 0x32
 8000490:	dde5      	ble.n	800045e <keypad_4x4_return_gia_tri_phim_nhan+0x1a>
		}
	}

	for (int8_t nha_count = 1; nha_count <= 50; nha_count++)
 8000492:	2301      	movs	r3, #1
 8000494:	75bb      	strb	r3, [r7, #22]
 8000496:	e012      	b.n	80004be <keypad_4x4_return_gia_tri_phim_nhan+0x7a>
	{
		check_trang_thai_phim(&phim_co_nhan, &gia_tri_phim_nhan, to_hop_phim);
 8000498:	1d3a      	adds	r2, r7, #4
 800049a:	f107 0115 	add.w	r1, r7, #21
 800049e:	1cfb      	adds	r3, r7, #3
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 f817 	bl	80004d4 <check_trang_thai_phim>

		if (phim_co_nhan == true) {
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <keypad_4x4_return_gia_tri_phim_nhan+0x6e>
			nha_count = 0;
 80004ac:	2300      	movs	r3, #0
 80004ae:	75bb      	strb	r3, [r7, #22]
			continue;
 80004b0:	bf00      	nop
	for (int8_t nha_count = 1; nha_count <= 50; nha_count++)
 80004b2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	3301      	adds	r3, #1
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	75bb      	strb	r3, [r7, #22]
 80004be:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80004c2:	2b32      	cmp	r3, #50	; 0x32
 80004c4:	dde8      	ble.n	8000498 <keypad_4x4_return_gia_tri_phim_nhan+0x54>
		}
	}

	return gia_tri_phim_nhan;
 80004c6:	7d7b      	ldrb	r3, [r7, #21]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	371c      	adds	r7, #28
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd90      	pop	{r4, r7, pc}
 80004d0:	080036a8 	.word	0x080036a8

080004d4 <check_trang_thai_phim>:

static void check_trang_thai_phim(bool *phim_co_nhan, uint8_t *gia_tri_phim_nhan, uint8_t *to_hop_phim)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	60f8      	str	r0, [r7, #12]
 80004dc:	60b9      	str	r1, [r7, #8]
 80004de:	607a      	str	r2, [r7, #4]
	uint8_t vi_tri_cot = 0, gia_tri_xuat_cot = 16;
 80004e0:	2300      	movs	r3, #0
 80004e2:	75fb      	strb	r3, [r7, #23]
 80004e4:	2310      	movs	r3, #16
 80004e6:	75bb      	strb	r3, [r7, #22]

	for (; vi_tri_cot <= 3; vi_tri_cot++, gia_tri_xuat_cot <<= 1)
 80004e8:	e01f      	b.n	800052a <check_trang_thai_phim+0x56>
	{
		KEYPAD_OUT_REGISTER = gia_tri_xuat_cot;
 80004ea:	4a13      	ldr	r2, [pc, #76]	; (8000538 <check_trang_thai_phim+0x64>)
 80004ec:	7dbb      	ldrb	r3, [r7, #22]
 80004ee:	60d3      	str	r3, [r2, #12]

		uint32_t trang_thai_hang = KEYPAD_IN_REGISTER;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <check_trang_thai_phim+0x64>)
 80004f2:	689b      	ldr	r3, [r3, #8]
 80004f4:	613b      	str	r3, [r7, #16]
		trang_thai_hang &= 0x000F;
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	f003 030f 	and.w	r3, r3, #15
 80004fc:	613b      	str	r3, [r7, #16]

		if (trang_thai_hang != 0)
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d009      	beq.n	8000518 <check_trang_thai_phim+0x44>
		{
			*phim_co_nhan = true;
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
			doc_gia_tri_phim(vi_tri_cot, trang_thai_hang, gia_tri_phim_nhan, to_hop_phim);
 800050a:	7df8      	ldrb	r0, [r7, #23]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	68ba      	ldr	r2, [r7, #8]
 8000510:	6939      	ldr	r1, [r7, #16]
 8000512:	f000 f813 	bl	800053c <doc_gia_tri_phim>
			return;
 8000516:	e00b      	b.n	8000530 <check_trang_thai_phim+0x5c>
		}

		else
			*phim_co_nhan = false;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
	for (; vi_tri_cot <= 3; vi_tri_cot++, gia_tri_xuat_cot <<= 1)
 800051e:	7dfb      	ldrb	r3, [r7, #23]
 8000520:	3301      	adds	r3, #1
 8000522:	75fb      	strb	r3, [r7, #23]
 8000524:	7dbb      	ldrb	r3, [r7, #22]
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	75bb      	strb	r3, [r7, #22]
 800052a:	7dfb      	ldrb	r3, [r7, #23]
 800052c:	2b03      	cmp	r3, #3
 800052e:	d9dc      	bls.n	80004ea <check_trang_thai_phim+0x16>
	}
}
 8000530:	3718      	adds	r7, #24
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40010800 	.word	0x40010800

0800053c <doc_gia_tri_phim>:

static void doc_gia_tri_phim(uint8_t vi_tri_cot, uint32_t trang_thai_hang, uint8_t *gia_tri_phim_nhan, uint8_t *to_hop_phim)
{
 800053c:	b480      	push	{r7}
 800053e:	b087      	sub	sp, #28
 8000540:	af00      	add	r7, sp, #0
 8000542:	60b9      	str	r1, [r7, #8]
 8000544:	607a      	str	r2, [r7, #4]
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	4603      	mov	r3, r0
 800054a:	73fb      	strb	r3, [r7, #15]
	uint8_t vi_tri_hang = 0, vi_tri_nhan = 1;
 800054c:	2300      	movs	r3, #0
 800054e:	75fb      	strb	r3, [r7, #23]
 8000550:	2301      	movs	r3, #1
 8000552:	75bb      	strb	r3, [r7, #22]

	for (; vi_tri_hang <= 12; vi_tri_hang += 4, vi_tri_nhan <<= 1)
 8000554:	e013      	b.n	800057e <doc_gia_tri_phim+0x42>
	{
		if ((trang_thai_hang & vi_tri_nhan) != 0)
 8000556:	7dba      	ldrb	r2, [r7, #22]
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	4013      	ands	r3, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	d008      	beq.n	8000572 <doc_gia_tri_phim+0x36>

			*gia_tri_phim_nhan = to_hop_phim [vi_tri_cot + vi_tri_hang];
 8000560:	7bfa      	ldrb	r2, [r7, #15]
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	4413      	add	r3, r2
 8000566:	461a      	mov	r2, r3
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	4413      	add	r3, r2
 800056c:	781a      	ldrb	r2, [r3, #0]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	701a      	strb	r2, [r3, #0]
	for (; vi_tri_hang <= 12; vi_tri_hang += 4, vi_tri_nhan <<= 1)
 8000572:	7dfb      	ldrb	r3, [r7, #23]
 8000574:	3304      	adds	r3, #4
 8000576:	75fb      	strb	r3, [r7, #23]
 8000578:	7dbb      	ldrb	r3, [r7, #22]
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	75bb      	strb	r3, [r7, #22]
 800057e:	7dfb      	ldrb	r3, [r7, #23]
 8000580:	2b0c      	cmp	r3, #12
 8000582:	d9e8      	bls.n	8000556 <doc_gia_tri_phim+0x1a>
	}
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	371c      	adds	r7, #28
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <lcd_1602_i2c_init>:
 * it can be commanded to go back to 4-bit mode. This needs basically three nybbles - first an 8-bit command to go to 4-bit mode,
 * and then it will be in 4-bit mode, but without proper font and lines configuration. From this point on, the command bytes can be sent as two nybbles as usual,
 * so first thing it needs is the command byte again as two nybbles, so it stays in 4-bit mode but this time it gets proper font and lines config. 
 */
void lcd_1602_i2c_init(I2C_HandleTypeDef* connect_mode)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    ptr_lcd_1602_i2c_connect_mode = connect_mode;
 8000598:	4a25      	ldr	r2, [pc, #148]	; (8000630 <lcd_1602_i2c_init+0xa0>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
    
    //reset khoi dong nguon
    //delay 100ms sau khi cap nguon
    gettick_delay_ms(55);
 800059e:	2037      	movs	r0, #55	; 0x37
 80005a0:	f000 fa53 	bl	8000a4a <gettick_delay_ms>
    // Reset LCD_ENABLE
    lcd_1602_i2c_write_4bit(0x00);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f8a7 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    // Turn backlight off
    backlight_state = BACKLIGHT_OFF;
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <lcd_1602_i2c_init+0xa4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
    //delay 4.5 ms sau khi gui lenh 0x30 lan 1
    lcd_1602_i2c_write_4bit(RESET_INIT_1);
 80005b0:	2030      	movs	r0, #48	; 0x30
 80005b2:	f000 f8a1 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    lcd_1602_i2c_pulse_enable(RESET_INIT_1);
 80005b6:	2030      	movs	r0, #48	; 0x30
 80005b8:	f000 f8bc 	bl	8000734 <lcd_1602_i2c_pulse_enable>
    gettick_delay_ms(5);
 80005bc:	2005      	movs	r0, #5
 80005be:	f000 fa44 	bl	8000a4a <gettick_delay_ms>
    //delay 100us sau khi gui lenh 0x30 lan 2
    lcd_1602_i2c_write_4bit(RESET_INIT_1);
 80005c2:	2030      	movs	r0, #48	; 0x30
 80005c4:	f000 f898 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    lcd_1602_i2c_pulse_enable(RESET_INIT_1);
 80005c8:	2030      	movs	r0, #48	; 0x30
 80005ca:	f000 f8b3 	bl	8000734 <lcd_1602_i2c_pulse_enable>
    gettick_delay_ms(5);
 80005ce:	2005      	movs	r0, #5
 80005d0:	f000 fa3b 	bl	8000a4a <gettick_delay_ms>
    //delay 100us sau khi gui lenh 0x30 lan 3
    lcd_1602_i2c_write_4bit(RESET_INIT_1);
 80005d4:	2030      	movs	r0, #48	; 0x30
 80005d6:	f000 f88f 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    lcd_1602_i2c_pulse_enable(RESET_INIT_1);
 80005da:	2030      	movs	r0, #48	; 0x30
 80005dc:	f000 f8aa 	bl	8000734 <lcd_1602_i2c_pulse_enable>
    gettick_delay_ms(5);
 80005e0:	2005      	movs	r0, #5
 80005e2:	f000 fa32 	bl	8000a4a <gettick_delay_ms>
    //delay 100us sau khi gui lenh 0x20
    lcd_1602_i2c_write_4bit(RESET_INIT_2);
 80005e6:	2020      	movs	r0, #32
 80005e8:	f000 f886 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    lcd_1602_i2c_pulse_enable(RESET_INIT_2);
 80005ec:	2020      	movs	r0, #32
 80005ee:	f000 f8a1 	bl	8000734 <lcd_1602_i2c_pulse_enable>
    gettick_delay_ms(1);
 80005f2:	2001      	movs	r0, #1
 80005f4:	f000 fa29 	bl	8000a4a <gettick_delay_ms>

    //khoi dong LCD
    //delay 100us sau khi gui lenh function set
    lcd_1602_i2c_write_instruction(FUNCTION_SET);
 80005f8:	2028      	movs	r0, #40	; 0x28
 80005fa:	f000 f81d 	bl	8000638 <lcd_1602_i2c_write_instruction>
    gettick_delay_ms(1);
 80005fe:	2001      	movs	r0, #1
 8000600:	f000 fa23 	bl	8000a4a <gettick_delay_ms>
    //delay 2 ms sau khi gui lenh clear display
    lcd_1602_i2c_write_instruction(CLEAR_DISPLAY);
 8000604:	2001      	movs	r0, #1
 8000606:	f000 f817 	bl	8000638 <lcd_1602_i2c_write_instruction>
    gettick_delay_ms(2);
 800060a:	2002      	movs	r0, #2
 800060c:	f000 fa1d 	bl	8000a4a <gettick_delay_ms>
    //delay 2ms sau khi gui lenh display control
    lcd_1602_i2c_write_instruction(LCD_OFF);
 8000610:	2008      	movs	r0, #8
 8000612:	f000 f811 	bl	8000638 <lcd_1602_i2c_write_instruction>
    gettick_delay_ms(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f000 fa17 	bl	8000a4a <gettick_delay_ms>
    //delay 100us sau khi gui lenh entry mode set
    lcd_1602_i2c_write_instruction(ENTRY_MODE_SET);
 800061c:	2006      	movs	r0, #6
 800061e:	f000 f80b 	bl	8000638 <lcd_1602_i2c_write_instruction>
    gettick_delay_ms(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fa11 	bl	8000a4a <gettick_delay_ms>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000028 	.word	0x20000028
 8000634:	2000002c 	.word	0x2000002c

08000638 <lcd_1602_i2c_write_instruction>:

void lcd_1602_i2c_write_instruction(uint8_t lcd_instruction)
{   
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
    uint8_t high_nibble = (lcd_instruction & 0xF0) | WRITE_INSTRUCTION;
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f023 030f 	bic.w	r3, r3, #15
 8000648:	73fb      	strb	r3, [r7, #15]
    uint8_t low_nibble  = ((lcd_instruction << 4) & 0xF0) | WRITE_INSTRUCTION;
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	73bb      	strb	r3, [r7, #14]

    lcd_1602_i2c_write_4bit(high_nibble);
 8000650:	7bfb      	ldrb	r3, [r7, #15]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f850 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    lcd_1602_i2c_pulse_enable(high_nibble);
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 f86a 	bl	8000734 <lcd_1602_i2c_pulse_enable>

    lcd_1602_i2c_write_4bit(low_nibble);
 8000660:	7bbb      	ldrb	r3, [r7, #14]
 8000662:	4618      	mov	r0, r3
 8000664:	f000 f848 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    lcd_1602_i2c_pulse_enable(low_nibble);
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	4618      	mov	r0, r3
 800066c:	f000 f862 	bl	8000734 <lcd_1602_i2c_pulse_enable>
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <lcd_1602_i2c_write_data>:

void lcd_1602_i2c_write_data(uint8_t lcd_data)
{   
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
    uint8_t high_nibble = (lcd_data & 0xF0) | WRITE_DATA;
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	f023 030f 	bic.w	r3, r3, #15
 800068a:	b25b      	sxtb	r3, r3
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	b25b      	sxtb	r3, r3
 8000692:	73fb      	strb	r3, [r7, #15]
    uint8_t low_nibble  = ((lcd_data << 4) & 0xF0) | WRITE_DATA;
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	b25b      	sxtb	r3, r3
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	b25b      	sxtb	r3, r3
 80006a0:	73bb      	strb	r3, [r7, #14]

    lcd_1602_i2c_write_4bit(high_nibble);
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 f827 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    lcd_1602_i2c_pulse_enable(high_nibble);
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f841 	bl	8000734 <lcd_1602_i2c_pulse_enable>

    lcd_1602_i2c_write_4bit(low_nibble);
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f81f 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    lcd_1602_i2c_pulse_enable(low_nibble);
 80006ba:	7bbb      	ldrb	r3, [r7, #14]
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f839 	bl	8000734 <lcd_1602_i2c_pulse_enable>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <lcd_1602_i2c_print_string>:
    }
}
*/

void lcd_1602_i2c_print_string(const char string_array[])
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
    while (*string_array != END_OF_LINE)
 80006d2:	e007      	b.n	80006e4 <lcd_1602_i2c_print_string+0x1a>
    {
        lcd_1602_i2c_write_data(*string_array);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffcd 	bl	8000678 <lcd_1602_i2c_write_data>
        string_array++;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	3301      	adds	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
    while (*string_array != END_OF_LINE)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d1f3      	bne.n	80006d4 <lcd_1602_i2c_print_string+0xa>
    }       
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <lcd_1602_i2c_write_4bit>:

static void lcd_1602_i2c_write_4bit(uint8_t write_data)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
    uint8_t data = write_data | backlight_state;
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <lcd_1602_i2c_write_4bit+0x34>)
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4313      	orrs	r3, r2
 800070a:	b2db      	uxtb	r3, r3
 800070c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(ptr_lcd_1602_i2c_connect_mode, DEVICE_I2C_ADDRESS, (uint8_t*)&data, 1, 1);
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <lcd_1602_i2c_write_4bit+0x38>)
 8000710:	6818      	ldr	r0, [r3, #0]
 8000712:	f107 020f 	add.w	r2, r7, #15
 8000716:	2301      	movs	r3, #1
 8000718:	9300      	str	r3, [sp, #0]
 800071a:	2301      	movs	r3, #1
 800071c:	214e      	movs	r1, #78	; 0x4e
 800071e:	f001 fbf7 	bl	8001f10 <HAL_I2C_Master_Transmit>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000002c 	.word	0x2000002c
 8000730:	20000028 	.word	0x20000028

08000734 <lcd_1602_i2c_pulse_enable>:

static void lcd_1602_i2c_pulse_enable(uint8_t write_data)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
    lcd_1602_i2c_write_4bit(write_data | LCD_ENABLE);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ffd6 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    gettick_delay_ms(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f000 f97c 	bl	8000a4a <gettick_delay_ms>

    lcd_1602_i2c_write_4bit(write_data & (~LCD_ENABLE));
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	f023 0304 	bic.w	r3, r3, #4
 8000758:	b2db      	uxtb	r3, r3
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffcc 	bl	80006f8 <lcd_1602_i2c_write_4bit>
    gettick_delay_ms(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f000 f972 	bl	8000a4a <gettick_delay_ms>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <lcd_1602_i2c_set_cursor_position>:

void lcd_1602_i2c_set_cursor_position(uint8_t vi_tri_cot, uint8_t vi_tri_hang)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	460a      	mov	r2, r1
 800077a:	71fb      	strb	r3, [r7, #7]
 800077c:	4613      	mov	r3, r2
 800077e:	71bb      	strb	r3, [r7, #6]
    uint8_t cursor_address_array[3] = {0x0, 0x80, 0xC0};
 8000780:	4a0d      	ldr	r2, [pc, #52]	; (80007b8 <lcd_1602_i2c_set_cursor_position+0x48>)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	4611      	mov	r1, r2
 800078a:	8019      	strh	r1, [r3, #0]
 800078c:	3302      	adds	r3, #2
 800078e:	0c12      	lsrs	r2, r2, #16
 8000790:	701a      	strb	r2, [r3, #0]
    uint8_t cursor_address = cursor_address_array[vi_tri_cot] + vi_tri_hang;
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	3310      	adds	r3, #16
 8000796:	443b      	add	r3, r7
 8000798:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800079c:	79bb      	ldrb	r3, [r7, #6]
 800079e:	4413      	add	r3, r2
 80007a0:	73fb      	strb	r3, [r7, #15]
    lcd_1602_i2c_write_instruction(cursor_address);
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ff47 	bl	8000638 <lcd_1602_i2c_write_instruction>
    gettick_delay_ms(1);
 80007aa:	2001      	movs	r0, #1
 80007ac:	f000 f94d 	bl	8000a4a <gettick_delay_ms>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	080036b8 	.word	0x080036b8

080007bc <lcd_1602_i2c_control_backlight>:

void lcd_1602_i2c_control_backlight(uint8_t backlight_data)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
    backlight_state = backlight_data;
 80007c6:	4a04      	ldr	r2, [pc, #16]	; (80007d8 <lcd_1602_i2c_control_backlight+0x1c>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	7013      	strb	r3, [r2, #0]
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	2000002c 	.word	0x2000002c

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 ff70 	bl	80016c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f810 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 f8ae 	bl	8000948 <MX_GPIO_Init>
  MX_SPI2_Init();
 80007ec:	f000 f876 	bl	80008dc <MX_SPI2_Init>
  MX_I2C1_Init();
 80007f0:	f000 f846 	bl	8000880 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 app_loop(&hspi2, &hi2c1);
 80007f4:	4902      	ldr	r1, [pc, #8]	; (8000800 <main+0x24>)
 80007f6:	4803      	ldr	r0, [pc, #12]	; (8000804 <main+0x28>)
 80007f8:	f7ff fca8 	bl	800014c <app_loop>
 80007fc:	e7fa      	b.n	80007f4 <main+0x18>
 80007fe:	bf00      	nop
 8000800:	20000030 	.word	0x20000030
 8000804:	20000084 	.word	0x20000084

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b090      	sub	sp, #64	; 0x40
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2228      	movs	r2, #40	; 0x28
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f002 feec 	bl	80035f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082e:	2301      	movs	r3, #1
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2310      	movs	r3, #16
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f001 febe 	bl	80025c0 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800084a:	f000 f8f9 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f92c 	bl	8002ac4 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000872:	f000 f8e5 	bl	8000a40 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3740      	adds	r7, #64	; 0x40
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2C1_Init+0x50>)
 8000886:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <MX_I2C1_Init+0x54>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_I2C1_Init+0x50>)
 800088c:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MX_I2C1_Init+0x58>)
 800088e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_I2C1_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_I2C1_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_I2C1_Init+0x50>)
 800089e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_I2C1_Init+0x50>)
 80008be:	f001 f9e3 	bl	8001c88 <HAL_I2C_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008c8:	f000 f8ba 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000030 	.word	0x20000030
 80008d4:	40005400 	.word	0x40005400
 80008d8:	000186a0 	.word	0x000186a0

080008dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_SPI2_Init+0x64>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <MX_SPI2_Init+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI2_Init+0x64>)
 80008e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI2_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_SPI2_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI2_Init+0x64>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI2_Init+0x64>)
 8000902:	2201      	movs	r2, #1
 8000904:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI2_Init+0x64>)
 8000908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI2_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_SPI2_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI2_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_SPI2_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI2_Init+0x64>)
 8000928:	220a      	movs	r2, #10
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_SPI2_Init+0x64>)
 800092e:	f002 fa43 	bl	8002db8 <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000938:	f000 f882 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000084 	.word	0x20000084
 8000944:	40003800 	.word	0x40003800

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095c:	4b35      	ldr	r3, [pc, #212]	; (8000a34 <MX_GPIO_Init+0xec>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a34      	ldr	r2, [pc, #208]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000962:	f043 0320 	orr.w	r3, r3, #32
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b32      	ldr	r3, [pc, #200]	; (8000a34 <MX_GPIO_Init+0xec>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0320 	and.w	r3, r3, #32
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b2f      	ldr	r3, [pc, #188]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a2e      	ldr	r2, [pc, #184]	; (8000a34 <MX_GPIO_Init+0xec>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <MX_GPIO_Init+0xec>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <MX_GPIO_Init+0xec>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_GPIO_Init+0xec>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0308 	and.w	r3, r3, #8
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	21f0      	movs	r1, #240	; 0xf0
 80009a8:	4823      	ldr	r0, [pc, #140]	; (8000a38 <MX_GPIO_Init+0xf0>)
 80009aa:	f001 f955 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80009b4:	4821      	ldr	r0, [pc, #132]	; (8000a3c <MX_GPIO_Init+0xf4>)
 80009b6:	f001 f94f 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80009ba:	230f      	movs	r3, #15
 80009bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	481a      	ldr	r0, [pc, #104]	; (8000a38 <MX_GPIO_Init+0xf0>)
 80009ce:	f000 ffbf 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009d2:	23f0      	movs	r3, #240	; 0xf0
 80009d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2302      	movs	r3, #2
 80009e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0310 	add.w	r3, r7, #16
 80009e6:	4619      	mov	r1, r3
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <MX_GPIO_Init+0xf0>)
 80009ea:	f000 ffb1 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <MX_GPIO_Init+0xf4>)
 8000a08:	f000 ffa2 	bl	8001950 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_GPIO_Init+0xf4>)
 8000a26:	f000 ff93 	bl	8001950 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3720      	adds	r7, #32
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010800 	.word	0x40010800
 8000a3c:	40010c00 	.word	0x40010c00

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>

08000a4a <gettick_delay_ms>:
#include "misc.h"

void gettick_delay_ms(uint32_t delay_time_ms)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b084      	sub	sp, #16
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
    uint32_t reference_time = HAL_GetTick();
 8000a52:	f000 fe8f 	bl	8001774 <HAL_GetTick>
 8000a56:	60f8      	str	r0, [r7, #12]

	while(true){
		if(HAL_GetTick() - reference_time >= delay_time_ms)
 8000a58:	f000 fe8c 	bl	8001774 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d900      	bls.n	8000a6a <gettick_delay_ms+0x20>
 8000a68:	e7f6      	b.n	8000a58 <gettick_delay_ms+0xe>
			return;
 8000a6a:	bf00      	nop
	}

}
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <rfid_rc522_write_one_data>:
 * 			The interface is described in the datasheet section 8.1.2.
 * @param	write_register		The register to write to. One of the rfid_rc522_register_address enums.
 * @param	write_data			The values to write.
 */
void rfid_rc522_write_one_data(uint8_t write_register, uint8_t write_data)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	4613      	mov	r3, r2
 8000a82:	71bb      	strb	r3, [r7, #6]
    uint8_t transmit_data_array[2] =
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	733b      	strb	r3, [r7, #12]
 8000a88:	79bb      	ldrb	r3, [r7, #6]
 8000a8a:	737b      	strb	r3, [r7, #13]
    {
        write_register,
        write_data
    };

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a92:	480a      	ldr	r0, [pc, #40]	; (8000abc <rfid_rc522_write_one_data+0x48>)
 8000a94:	f001 f8e0 	bl	8001c58 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(ptr_rfid_rc522_connect_mode, transmit_data_array, 2, 1);
 8000a98:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <rfid_rc522_write_one_data+0x4c>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	f107 010c 	add.w	r1, r7, #12
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	f002 fa0c 	bl	8002ec0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aae:	4803      	ldr	r0, [pc, #12]	; (8000abc <rfid_rc522_write_one_data+0x48>)
 8000ab0:	f001 f8d2 	bl	8001c58 <HAL_GPIO_WritePin>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	200000dc 	.word	0x200000dc

08000ac4 <rfid_rc522_write_many_data>:
 * @param	write_register		The register to write to. One of the rfid_rc522_register_address enums.
 * @param	write_data_array	The values to write. Byte array.
 * @param	write_byte_count	number of ONLY data byte to write
 */
void rfid_rc522_write_many_data(uint8_t write_register, uint8_t *write_data_array, uint8_t write_byte_count)
{
 8000ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ac8:	b087      	sub	sp, #28
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	4603      	mov	r3, r0
 8000ace:	6039      	str	r1, [r7, #0]
 8000ad0:	71fb      	strb	r3, [r7, #7]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	71bb      	strb	r3, [r7, #6]
 8000ad6:	466b      	mov	r3, sp
 8000ad8:	461e      	mov	r6, r3
	uint8_t transmit_byte_count = write_byte_count + 1;
 8000ada:	79bb      	ldrb	r3, [r7, #6]
 8000adc:	3301      	adds	r3, #1
 8000ade:	75bb      	strb	r3, [r7, #22]
	uint8_t transmit_data_array[transmit_byte_count];
 8000ae0:	7db9      	ldrb	r1, [r7, #22]
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	b2cb      	uxtb	r3, r1
 8000aea:	2200      	movs	r2, #0
 8000aec:	4698      	mov	r8, r3
 8000aee:	4691      	mov	r9, r2
 8000af0:	f04f 0200 	mov.w	r2, #0
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000afc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b04:	b2cb      	uxtb	r3, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	461c      	mov	r4, r3
 8000b0a:	4615      	mov	r5, r2
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	00eb      	lsls	r3, r5, #3
 8000b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b1a:	00e2      	lsls	r2, r4, #3
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	3307      	adds	r3, #7
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	ebad 0d03 	sub.w	sp, sp, r3
 8000b28:	466b      	mov	r3, sp
 8000b2a:	3300      	adds	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]

	transmit_data_array[0] = write_register;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	79fa      	ldrb	r2, [r7, #7]
 8000b32:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 1; i <= transmit_byte_count; i++)
 8000b34:	2301      	movs	r3, #1
 8000b36:	75fb      	strb	r3, [r7, #23]
 8000b38:	e00a      	b.n	8000b50 <rfid_rc522_write_many_data+0x8c>
	{
		transmit_data_array[i] = write_data_array[i - 1];
 8000b3a:	7dfb      	ldrb	r3, [r7, #23]
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	441a      	add	r2, r3
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	7811      	ldrb	r1, [r2, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i <= transmit_byte_count; i++)
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	75fb      	strb	r3, [r7, #23]
 8000b50:	7dfa      	ldrb	r2, [r7, #23]
 8000b52:	7dbb      	ldrb	r3, [r7, #22]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d9f0      	bls.n	8000b3a <rfid_rc522_write_many_data+0x76>
	}

	//Calculate the timeout for hal spi, 500000 Bytes/s, this is from the speed of 4Mb/s
	//+1 so that we can generous.
	uint8_t timeout_ms = (transmit_byte_count / 500000) + 1;
 8000b58:	7dbb      	ldrb	r3, [r7, #22]
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <rfid_rc522_write_many_data+0xdc>)
 8000b5c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b60:	1452      	asrs	r2, r2, #17
 8000b62:	17db      	asrs	r3, r3, #31
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	3301      	adds	r3, #1
 8000b6a:	72fb      	strb	r3, [r7, #11]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <rfid_rc522_write_many_data+0xe0>)
 8000b74:	f001 f870 	bl	8001c58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(ptr_rfid_rc522_connect_mode, transmit_data_array, transmit_byte_count, timeout_ms);
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <rfid_rc522_write_many_data+0xe4>)
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	7dbb      	ldrb	r3, [r7, #22]
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	7afb      	ldrb	r3, [r7, #11]
 8000b82:	68f9      	ldr	r1, [r7, #12]
 8000b84:	f002 f99c 	bl	8002ec0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <rfid_rc522_write_many_data+0xe0>)
 8000b90:	f001 f862 	bl	8001c58 <HAL_GPIO_WritePin>
 8000b94:	46b5      	mov	sp, r6
}
 8000b96:	bf00      	nop
 8000b98:	371c      	adds	r7, #28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ba0:	431bde83 	.word	0x431bde83
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	200000dc 	.word	0x200000dc

08000bac <rfid_rc522_read_one_data>:
 * @param	read_register		The register to read from. One of the rfid_rc522_register_address enums.
 * @param	read_data			The read value.
 * @return	read_data - 1 byte.
 */
uint8_t rfid_rc522_read_one_data(uint8_t read_register)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	71fb      	strb	r3, [r7, #7]
    uint8_t read_address_array[2] =
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	733b      	strb	r3, [r7, #12]
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	737b      	strb	r3, [r7, #13]
        END_OF_SPI_READ
    };

    uint8_t read_data_array[2];

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <rfid_rc522_read_one_data+0x50>)
 8000bcc:	f001 f844 	bl	8001c58 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(ptr_rfid_rc522_connect_mode, read_address_array, read_data_array, 2, 1);
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <rfid_rc522_read_one_data+0x54>)
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	f107 0208 	add.w	r2, r7, #8
 8000bd8:	f107 010c 	add.w	r1, r7, #12
 8000bdc:	2301      	movs	r3, #1
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2302      	movs	r3, #2
 8000be2:	f002 fab0 	bl	8003146 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <rfid_rc522_read_one_data+0x50>)
 8000bee:	f001 f833 	bl	8001c58 <HAL_GPIO_WritePin>

    return read_data_array[1];
 8000bf2:	7a7b      	ldrb	r3, [r7, #9]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40010c00 	.word	0x40010c00
 8000c00:	200000dc 	.word	0x200000dc

08000c04 <rfid_rc522_read_many_data>:
 * @param	rxAlign_value		used for reception of bit-oriented frames: defines the bit position
 * 								for the first bit received to be stored in the FIFO buffer.
 * @return	read_data_array with the data from the read register
 */
void rfid_rc522_read_many_data(uint8_t read_register, uint8_t *read_data_array, uint8_t read_byte_count, uint8_t rxAlign_value)
{
 8000c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c08:	b089      	sub	sp, #36	; 0x24
 8000c0a:	af02      	add	r7, sp, #8
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	461a      	mov	r2, r3
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	460b      	mov	r3, r1
 8000c18:	71bb      	strb	r3, [r7, #6]
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	717b      	strb	r3, [r7, #5]
 8000c1e:	466b      	mov	r3, sp
 8000c20:	461e      	mov	r6, r3
	uint8_t transmit_byte_count = read_byte_count + 1;
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	3301      	adds	r3, #1
 8000c26:	75bb      	strb	r3, [r7, #22]
	uint8_t transmit_data_array[transmit_byte_count];
 8000c28:	7db9      	ldrb	r1, [r7, #22]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	b2cb      	uxtb	r3, r1
 8000c32:	2200      	movs	r2, #0
 8000c34:	4698      	mov	r8, r3
 8000c36:	4691      	mov	r9, r2
 8000c38:	f04f 0200 	mov.w	r2, #0
 8000c3c:	f04f 0300 	mov.w	r3, #0
 8000c40:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c44:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c48:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c4c:	b2cb      	uxtb	r3, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	461c      	mov	r4, r3
 8000c52:	4615      	mov	r5, r2
 8000c54:	f04f 0200 	mov.w	r2, #0
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	00eb      	lsls	r3, r5, #3
 8000c5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c62:	00e2      	lsls	r2, r4, #3
 8000c64:	460b      	mov	r3, r1
 8000c66:	3307      	adds	r3, #7
 8000c68:	08db      	lsrs	r3, r3, #3
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	ebad 0d03 	sub.w	sp, sp, r3
 8000c70:	ab02      	add	r3, sp, #8
 8000c72:	3300      	adds	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]

	transmit_data_array[transmit_byte_count - 1] = END_OF_SPI_READ;
 8000c76:	7dbb      	ldrb	r3, [r7, #22]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i <= (transmit_byte_count - 2); i++)
 8000c80:	2300      	movs	r3, #0
 8000c82:	75fb      	strb	r3, [r7, #23]
 8000c84:	e009      	b.n	8000c9a <rfid_rc522_read_many_data+0x96>
	{
		transmit_data_array[i] = READ_MASK | read_register;
 8000c86:	7dfb      	ldrb	r3, [r7, #23]
 8000c88:	79fa      	ldrb	r2, [r7, #7]
 8000c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000c8e:	b2d1      	uxtb	r1, r2
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i <= (transmit_byte_count - 2); i++)
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	3301      	adds	r3, #1
 8000c98:	75fb      	strb	r3, [r7, #23]
 8000c9a:	7dbb      	ldrb	r3, [r7, #22]
 8000c9c:	1e5a      	subs	r2, r3, #1
 8000c9e:	7dfb      	ldrb	r3, [r7, #23]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dcf0      	bgt.n	8000c86 <rfid_rc522_read_many_data+0x82>
	}

	//Calculate the timeout for hal spi, 500000 Bytes/s, this is from the speed of 4Mb/s
	//+1 so that we can generous.
	uint8_t timeout_ms = (transmit_byte_count / 500000) + 1;
 8000ca4:	7dbb      	ldrb	r3, [r7, #22]
 8000ca6:	4a19      	ldr	r2, [pc, #100]	; (8000d0c <rfid_rc522_read_many_data+0x108>)
 8000ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cac:	1452      	asrs	r2, r2, #17
 8000cae:	17db      	asrs	r3, r3, #31
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cbe:	4814      	ldr	r0, [pc, #80]	; (8000d10 <rfid_rc522_read_many_data+0x10c>)
 8000cc0:	f000 ffca 	bl	8001c58 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(ptr_rfid_rc522_connect_mode, transmit_data_array, read_data_array, read_byte_count, timeout_ms);
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <rfid_rc522_read_many_data+0x110>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	79bb      	ldrb	r3, [r7, #6]
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	7afb      	ldrb	r3, [r7, #11]
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	68f9      	ldr	r1, [r7, #12]
 8000cd6:	f002 fa36 	bl	8003146 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce0:	480b      	ldr	r0, [pc, #44]	; (8000d10 <rfid_rc522_read_many_data+0x10c>)
 8000ce2:	f000 ffb9 	bl	8001c58 <HAL_GPIO_WritePin>

	//Read the first byte of the read data according to the rxAlign_value
	uint8_t rxAlign_mask = 0xff << rxAlign_value;
 8000ce6:	797b      	ldrb	r3, [r7, #5]
 8000ce8:	22ff      	movs	r2, #255	; 0xff
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	72bb      	strb	r3, [r7, #10]
	read_data_array[0] = read_data_array[0] & rxAlign_mask;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	7abb      	ldrb	r3, [r7, #10]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	46b5      	mov	sp, r6
}
 8000d00:	bf00      	nop
 8000d02:	371c      	adds	r7, #28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d0a:	bf00      	nop
 8000d0c:	431bde83 	.word	0x431bde83
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	200000dc 	.word	0x200000dc

08000d18 <rfid_rc522_clear_register_bit_mask>:
 * @brief	Clears the bits given in mask from register reg.
 * @param	register_address	The register to clear the bits according to the bit mask.
 * @param	bit_mask			The bit mask.
 */
void rfid_rc522_clear_register_bit_mask(uint8_t register_address, uint8_t bit_mask)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460a      	mov	r2, r1
 8000d22:	71fb      	strb	r3, [r7, #7]
 8000d24:	4613      	mov	r3, r2
 8000d26:	71bb      	strb	r3, [r7, #6]
    uint8_t register_data = rfid_rc522_read_one_data(register_address);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff3e 	bl	8000bac <rfid_rc522_read_one_data>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]

    rfid_rc522_write_one_data(register_address, register_data & (~bit_mask));
 8000d34:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	b25a      	sxtb	r2, r3
 8000d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d40:	4013      	ands	r3, r2
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fe92 	bl	8000a74 <rfid_rc522_write_one_data>
}
 8000d50:	bf00      	nop
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <rfid_rc522_set_register_bit_mask>:
 * @brief	Sets the bits given in mask in register reg.
 * @param	register_address	The register to update. One of the rfid_rc522_register enums.
 * @param	bit_mask			The bits to set.
 */
void rfid_rc522_set_register_bit_mask(uint8_t register_address, uint8_t bit_mask)
{ 
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	uint8_t register_data = rfid_rc522_read_one_data(register_address);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff ff1e 	bl	8000bac <rfid_rc522_read_one_data>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]

	rfid_rc522_write_one_data(register_address, register_data | bit_mask); // set bit mask		
 8000d74:	7bfa      	ldrb	r2, [r7, #15]
 8000d76:	79bb      	ldrb	r3, [r7, #6]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fe77 	bl	8000a74 <rfid_rc522_write_one_data>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <rfid_rc522_get_register_bit_mask>:
 * @param	register_address	The register to get data. One of the rfid_rc522_register enums.
 * @param	bit_mask			The bits to get data.
 * @return	The register data with the bit mask apply.
 */
uint8_t rfid_rc522_get_register_bit_mask(uint8_t register_address, uint8_t bit_mask)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	4603      	mov	r3, r0
 8000d96:	460a      	mov	r2, r1
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	71bb      	strb	r3, [r7, #6]
    return rfid_rc522_read_one_data(register_address) & bit_mask;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff03 	bl	8000bac <rfid_rc522_read_one_data>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	4013      	ands	r3, r2
 8000dae:	b2db      	uxtb	r3, r3
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <rfid_rc522_calculate_crc>:
 * @param   data_byte_count  	In: The number of bytes to transfer.
 * @param   result_array  		Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
 * @return  STATUS_OK on success, STATUS_??? otherwise.
 */
enum rfid_rc522_status_code rfid_rc522_calculate_crc(uint8_t *data_to_crc, uint8_t data_byte_count, uint8_t *result_array)
{
 8000db8:	b590      	push	{r4, r7, lr}
 8000dba:	b087      	sub	sp, #28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	72fb      	strb	r3, [r7, #11]
	// Stop any active command.
	rfid_rc522_write_one_data(CommandReg, Idle);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	2002      	movs	r0, #2
 8000dca:	f7ff fe53 	bl	8000a74 <rfid_rc522_write_one_data>
	// Clear the CRCIRq interrupt request bit
	rfid_rc522_write_one_data(DivIrqReg, 0x04);
 8000dce:	2104      	movs	r1, #4
 8000dd0:	200a      	movs	r0, #10
 8000dd2:	f7ff fe4f 	bl	8000a74 <rfid_rc522_write_one_data>
	// FlushBuffer = 1, FIFO initialization
	rfid_rc522_write_one_data(FIFOLevelReg, 0x80);
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	2014      	movs	r0, #20
 8000dda:	f7ff fe4b 	bl	8000a74 <rfid_rc522_write_one_data>
	// Write data to the FIFO
	rfid_rc522_write_many_data(FIFODataReg, data_to_crc, data_byte_count);
 8000dde:	7afb      	ldrb	r3, [r7, #11]
 8000de0:	461a      	mov	r2, r3
 8000de2:	68f9      	ldr	r1, [r7, #12]
 8000de4:	2012      	movs	r0, #18
 8000de6:	f7ff fe6d 	bl	8000ac4 <rfid_rc522_write_many_data>
	// Start the calculation
	rfid_rc522_write_one_data(CommandReg, CalcCRC);
 8000dea:	2103      	movs	r1, #3
 8000dec:	2002      	movs	r0, #2
 8000dee:	f7ff fe41 	bl	8000a74 <rfid_rc522_write_one_data>
	
	// Wait for the CRC calculation to complete. Check for the register to
	// indicate that the CRC calculation is complete in a loop. If the
	// calculation is not indicated as complete in ~90ms, then time out
	// the operation.
	const uint32_t complete_time = HAL_GetTick() + 90;
 8000df2:	f000 fcbf 	bl	8001774 <HAL_GetTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	335a      	adds	r3, #90	; 0x5a
 8000dfa:	617b      	str	r3, [r7, #20]

	do
	{
		// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq reserved CRCIRq reserved reserved
		uint8_t CRCIRq_value = rfid_rc522_get_register_bit_mask(DivIrqReg, 0x04);
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	200a      	movs	r0, #10
 8000e00:	f7ff ffc5 	bl	8000d8e <rfid_rc522_get_register_bit_mask>
 8000e04:	4603      	mov	r3, r0
 8000e06:	74fb      	strb	r3, [r7, #19]
		if (CRCIRq_value)
 8000e08:	7cfb      	ldrb	r3, [r7, #19]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d013      	beq.n	8000e36 <rfid_rc522_calculate_crc+0x7e>
		{	// CRCIRq bit set - calculation done
			// Stop calculating CRC for new content in the FIFO.
			rfid_rc522_write_one_data(CommandReg, Idle);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff fe2f 	bl	8000a74 <rfid_rc522_write_one_data>
			// Transfer the result from the registers to the result buffer
			result_array[0] = rfid_rc522_read_one_data(CRCResultRegL);
 8000e16:	2044      	movs	r0, #68	; 0x44
 8000e18:	f7ff fec8 	bl	8000bac <rfid_rc522_read_one_data>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	701a      	strb	r2, [r3, #0]
			result_array[1] = rfid_rc522_read_one_data(CRCResultRegH);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	1c5c      	adds	r4, r3, #1
 8000e28:	2042      	movs	r0, #66	; 0x42
 8000e2a:	f7ff febf 	bl	8000bac <rfid_rc522_read_one_data>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	7023      	strb	r3, [r4, #0]
			return STATUS_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e006      	b.n	8000e44 <rfid_rc522_calculate_crc+0x8c>
		}
	}
	while (HAL_GetTick() < complete_time);
 8000e36:	f000 fc9d 	bl	8001774 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d8dc      	bhi.n	8000dfc <rfid_rc522_calculate_crc+0x44>

	// 89ms passed and nothing happened. Communication with the MFRC522 might be down.
	return STATUS_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd90      	pop	{r4, r7, pc}

08000e4c <rfid_rc522_init>:

/**
 * @brief	Initializes the MFRC522 chip.
 */
void rfid_rc522_init(SPI_HandleTypeDef* connect_mode)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	ptr_rfid_rc522_connect_mode = connect_mode;
 8000e54:	4a17      	ldr	r2, [pc, #92]	; (8000eb4 <rfid_rc522_init+0x68>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]

	//Do a soft reset
    rfid_rc522_soft_reset();
 8000e5a:	f000 f82d 	bl	8000eb8 <rfid_rc522_soft_reset>

    // Reset baud rates
	rfid_rc522_write_one_data(TxModeReg, 0x00);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2024      	movs	r0, #36	; 0x24
 8000e62:	f7ff fe07 	bl	8000a74 <rfid_rc522_write_one_data>
	rfid_rc522_write_one_data(RxModeReg, 0x00);
 8000e66:	2100      	movs	r1, #0
 8000e68:	2026      	movs	r0, #38	; 0x26
 8000e6a:	f7ff fe03 	bl	8000a74 <rfid_rc522_write_one_data>

	// Reset ModWidthReg
	rfid_rc522_write_one_data(ModWidthReg, 0x26);
 8000e6e:	2126      	movs	r1, #38	; 0x26
 8000e70:	2048      	movs	r0, #72	; 0x48
 8000e72:	f7ff fdff 	bl	8000a74 <rfid_rc522_write_one_data>

	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
	rfid_rc522_write_one_data(TModeReg, 0x80);
 8000e76:	2180      	movs	r1, #128	; 0x80
 8000e78:	2054      	movs	r0, #84	; 0x54
 8000e7a:	f7ff fdfb 	bl	8000a74 <rfid_rc522_write_one_data>
	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25μs.
	rfid_rc522_write_one_data(TPrescalerReg, 0xA9);
 8000e7e:	21a9      	movs	r1, #169	; 0xa9
 8000e80:	2056      	movs	r0, #86	; 0x56
 8000e82:	f7ff fdf7 	bl	8000a74 <rfid_rc522_write_one_data>
	// Reload timer with 0x7D0 = 2000, ie 50ms before timeout.
	rfid_rc522_write_one_data(TReloadRegH, 0x07);
 8000e86:	2107      	movs	r1, #7
 8000e88:	2058      	movs	r0, #88	; 0x58
 8000e8a:	f7ff fdf3 	bl	8000a74 <rfid_rc522_write_one_data>
	rfid_rc522_write_one_data(TReloadRegL, 0xD0);
 8000e8e:	21d0      	movs	r1, #208	; 0xd0
 8000e90:	205a      	movs	r0, #90	; 0x5a
 8000e92:	f7ff fdef 	bl	8000a74 <rfid_rc522_write_one_data>
	
	// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
	rfid_rc522_write_one_data(TxASKReg, 0x40);
 8000e96:	2140      	movs	r1, #64	; 0x40
 8000e98:	202a      	movs	r0, #42	; 0x2a
 8000e9a:	f7ff fdeb 	bl	8000a74 <rfid_rc522_write_one_data>
	// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
	rfid_rc522_write_one_data(ModeReg, 0x3D);
 8000e9e:	213d      	movs	r1, #61	; 0x3d
 8000ea0:	2022      	movs	r0, #34	; 0x22
 8000ea2:	f7ff fde7 	bl	8000a74 <rfid_rc522_write_one_data>
	// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
	rfid_rc522_antenna_on();
 8000ea6:	f000 f825 	bl	8000ef4 <rfid_rc522_antenna_on>
}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000dc 	.word	0x200000dc

08000eb8 <rfid_rc522_soft_reset>:

/**
 * @brief Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void rfid_rc522_soft_reset()
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
    rfid_rc522_write_one_data(CommandReg, SoftReset);
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f7ff fdd7 	bl	8000a74 <rfid_rc522_write_one_data>
    // Issue the SoftReset command.
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74μs. Let us be generous: 50ms.

    uint8_t count = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]

    do
    {
        gettick_delay_ms(50);
 8000eca:	2032      	movs	r0, #50	; 0x32
 8000ecc:	f7ff fdbd 	bl	8000a4a <gettick_delay_ms>
    }
    while ((rfid_rc522_read_one_data(CommandReg) & (1 << 4)) && (++count) < 3);
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f7ff fe6b 	bl	8000bac <rfid_rc522_read_one_data>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f003 0310 	and.w	r3, r3, #16
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <rfid_rc522_soft_reset+0x34>
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d9ee      	bls.n	8000eca <rfid_rc522_soft_reset+0x12>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <rfid_rc522_antenna_on>:
/**
 * @brief	Turns the antenna on by enabling pins TX1 and TX2.
 * 			After a reset these pins are disabled.
 */
void rfid_rc522_antenna_on()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
    uint8_t TxnRFEn_bit = rfid_rc522_get_register_bit_mask(TxControlReg, 0x03);
 8000efa:	2103      	movs	r1, #3
 8000efc:	2028      	movs	r0, #40	; 0x28
 8000efe:	f7ff ff46 	bl	8000d8e <rfid_rc522_get_register_bit_mask>
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]

    if (TxnRFEn_bit != 0x03)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b03      	cmp	r3, #3
 8000f0a:	d003      	beq.n	8000f14 <rfid_rc522_antenna_on+0x20>
        rfid_rc522_set_register_bit_mask(TxControlReg, 0x03);
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	2028      	movs	r0, #40	; 0x28
 8000f10:	f7ff ff22 	bl	8000d58 <rfid_rc522_set_register_bit_mask>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <rfid_rc522_transceive_data>:
 * @param	rxAlign_value			In: Defines the bit position in backData[0] for the first bit received. Default 0.
 * @param	check_crc				In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
 * @return 	STATUS_OK on success, STATUS_??? otherwise.
 */
enum rfid_rc522_status_code rfid_rc522_transceive_data(uint8_t *transmit_data, uint8_t transmit_byte_count, uint8_t *receive_data, uint8_t *receive_byte_count, uint8_t *valid_bit, uint8_t rxAlign_value, bool check_crc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af06      	add	r7, sp, #24
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	607a      	str	r2, [r7, #4]
 8000f26:	603b      	str	r3, [r7, #0]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	72fb      	strb	r3, [r7, #11]
	uint8_t waitIRq_bit = 0x30;		// RxIRq and IdleIRq
 8000f2c:	2330      	movs	r3, #48	; 0x30
 8000f2e:	75fb      	strb	r3, [r7, #23]
	return rfid_rc522_communicate_with_rfid_card(Transceive, waitIRq_bit, transmit_data, transmit_byte_count, receive_data, receive_byte_count, valid_bit, rxAlign_value, check_crc);
 8000f30:	7afa      	ldrb	r2, [r7, #11]
 8000f32:	7df9      	ldrb	r1, [r7, #23]
 8000f34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f38:	9304      	str	r3, [sp, #16]
 8000f3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000f3e:	9303      	str	r3, [sp, #12]
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	200c      	movs	r0, #12
 8000f52:	f000 f805 	bl	8000f60 <rfid_rc522_communicate_with_rfid_card>
 8000f56:	4603      	mov	r3, r0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <rfid_rc522_communicate_with_rfid_card>:
 * @param	rxAlign_value			In: Defines the bit position in backData[0] for the first bit received. Default 0.
 * @param	check_crc				In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
 * @return 	STATUS_OK on success, STATUS_??? otherwise.
 */
enum rfid_rc522_status_code rfid_rc522_communicate_with_rfid_card(uint8_t command, uint8_t waitIRq_bit, uint8_t *transmit_data, uint8_t transmit_byte_count, uint8_t *receive_data, uint8_t *receive_byte_count, uint8_t *valid_bit, uint8_t rxAlign_value, bool check_crc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	603a      	str	r2, [r7, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	71bb      	strb	r3, [r7, #6]
 8000f72:	4613      	mov	r3, r2
 8000f74:	717b      	strb	r3, [r7, #5]
	// Prepare values for BitFramingReg
	uint8_t txLastBits_bit = (valid_bit != 0) ? *valid_bit : 0;
 8000f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <rfid_rc522_communicate_with_rfid_card+0x22>
 8000f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	e000      	b.n	8000f84 <rfid_rc522_communicate_with_rfid_card+0x24>
 8000f82:	2300      	movs	r3, #0
 8000f84:	757b      	strb	r3, [r7, #21]
	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	uint8_t BitFramingReg_value = (rxAlign_value << 4) + txLastBits_bit;
 8000f86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f8a:	011b      	lsls	r3, r3, #4
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	7d7b      	ldrb	r3, [r7, #21]
 8000f90:	4413      	add	r3, r2
 8000f92:	753b      	strb	r3, [r7, #20]
	
	// Stop any active command.
	rfid_rc522_write_one_data(CommandReg, Idle);
 8000f94:	2100      	movs	r1, #0
 8000f96:	2002      	movs	r0, #2
 8000f98:	f7ff fd6c 	bl	8000a74 <rfid_rc522_write_one_data>
	// Clear all seven interrupt request bits
	rfid_rc522_write_one_data(ComIrqReg, 0x7F);
 8000f9c:	217f      	movs	r1, #127	; 0x7f
 8000f9e:	2008      	movs	r0, #8
 8000fa0:	f7ff fd68 	bl	8000a74 <rfid_rc522_write_one_data>
	// FlushBuffer = 1, FIFO initialization
	rfid_rc522_write_one_data(FIFOLevelReg, 0x80);
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	2014      	movs	r0, #20
 8000fa8:	f7ff fd64 	bl	8000a74 <rfid_rc522_write_one_data>
	// Write sendData to the FIFO
	rfid_rc522_write_many_data(FIFODataReg, transmit_data, transmit_byte_count);
 8000fac:	797b      	ldrb	r3, [r7, #5]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	6839      	ldr	r1, [r7, #0]
 8000fb2:	2012      	movs	r0, #18
 8000fb4:	f7ff fd86 	bl	8000ac4 <rfid_rc522_write_many_data>
	// Bit adjustments
	rfid_rc522_write_one_data(BitFramingReg, BitFramingReg_value);
 8000fb8:	7d3b      	ldrb	r3, [r7, #20]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	201a      	movs	r0, #26
 8000fbe:	f7ff fd59 	bl	8000a74 <rfid_rc522_write_one_data>

	// Execute the command
	rfid_rc522_write_one_data(CommandReg, command);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f7ff fd54 	bl	8000a74 <rfid_rc522_write_one_data>
	if (command == Transceive)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b0c      	cmp	r3, #12
 8000fd0:	d103      	bne.n	8000fda <rfid_rc522_communicate_with_rfid_card+0x7a>
	{
		// BitFramingReg[7] = StartSend = 1, transmission of data starts
		rfid_rc522_set_register_bit_mask(BitFramingReg, 0x80);
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	201a      	movs	r0, #26
 8000fd6:	f7ff febf 	bl	8000d58 <rfid_rc522_set_register_bit_mask>
	// Wait here for the command to complete. The bits specified in the
	// `waitIRq` parameter define what bits constitute a completed command.
	// When they are set in the ComIrqReg register, then the command is
	// considered complete. If the command is not indicated as complete in
	// ~36ms, then consider the command as timed out.
	const uint32_t complete_time = HAL_GetTick() + 55;
 8000fda:	f000 fbcb 	bl	8001774 <HAL_GetTick>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	3337      	adds	r3, #55	; 0x37
 8000fe2:	613b      	str	r3, [r7, #16]
	bool command_is_completed = false;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	75fb      	strb	r3, [r7, #23]

	do 
	{
		// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq HiAlertIRq LoAlertIRq ErrIRq TimerIRq
		uint8_t ComIrqReg_value = rfid_rc522_read_one_data(ComIrqReg);
 8000fe8:	2008      	movs	r0, #8
 8000fea:	f7ff fddf 	bl	8000bac <rfid_rc522_read_one_data>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
		// One of the interrupts that signal success has been set.
		if (ComIrqReg_value & waitIRq_bit)
 8000ff2:	7bfa      	ldrb	r2, [r7, #15]
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <rfid_rc522_communicate_with_rfid_card+0xa4>
		{
			command_is_completed = true;
 8000ffe:	2301      	movs	r3, #1
 8001000:	75fb      	strb	r3, [r7, #23]
			break;
 8001002:	e00c      	b.n	800101e <rfid_rc522_communicate_with_rfid_card+0xbe>
		}
		// Timer interrupt - nothing received in 25ms
		if (ComIrqReg_value & 0x01)
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <rfid_rc522_communicate_with_rfid_card+0xb2>
		{
			return STATUS_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e08c      	b.n	800112c <rfid_rc522_communicate_with_rfid_card+0x1cc>
		}
	}
	while (HAL_GetTick() < complete_time);
 8001012:	f000 fbaf 	bl	8001774 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4293      	cmp	r3, r2
 800101c:	d8e4      	bhi.n	8000fe8 <rfid_rc522_communicate_with_rfid_card+0x88>

	// 36ms and nothing happened. Communication with the MFRC522 might be down.
	if (!command_is_completed)
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	f083 0301 	eor.w	r3, r3, #1
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <rfid_rc522_communicate_with_rfid_card+0xce>
	{
		return STATUS_INTERNAL_ERROR;
 800102a:	2305      	movs	r3, #5
 800102c:	e07e      	b.n	800112c <rfid_rc522_communicate_with_rfid_card+0x1cc>
	}
	
	// ERROR HANDLING
	// Stop now if any errors except collisions were detected.
	// ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl CollErr CRCErr ParityErr ProtocolErr
	uint8_t ErrorReg_value = rfid_rc522_read_one_data(ErrorReg);
 800102e:	200c      	movs	r0, #12
 8001030:	f7ff fdbc 	bl	8000bac <rfid_rc522_read_one_data>
 8001034:	4603      	mov	r3, r0
 8001036:	73bb      	strb	r3, [r7, #14]
	
	// Tell about BufferOvfl ParityErr ProtocolErr error
	if (ErrorReg_value & 0x13)	// 0x13 = BufferOvfl ParityErr ProtocolErr
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	f003 0313 	and.w	r3, r3, #19
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <rfid_rc522_communicate_with_rfid_card+0xe6>
	{	 						
		return STATUS_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e072      	b.n	800112c <rfid_rc522_communicate_with_rfid_card+0x1cc>
	}

	// DATA RETURNING FROM FIFO TO MCU
	// If the caller wants data back, get it from the MFRC522.
	uint8_t _validBits = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	75bb      	strb	r3, [r7, #22]
	if (receive_data && receive_byte_count)
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d024      	beq.n	800109a <rfid_rc522_communicate_with_rfid_card+0x13a>
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	2b00      	cmp	r3, #0
 8001054:	d021      	beq.n	800109a <rfid_rc522_communicate_with_rfid_card+0x13a>
	{
		// Number of bytes in the FIFO
		uint8_t FIFODataReg_byte_count = rfid_rc522_read_one_data(FIFOLevelReg);
 8001056:	2014      	movs	r0, #20
 8001058:	f7ff fda8 	bl	8000bac <rfid_rc522_read_one_data>
 800105c:	4603      	mov	r3, r0
 800105e:	737b      	strb	r3, [r7, #13]
		
		if (FIFODataReg_byte_count > *receive_byte_count)
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	7b7a      	ldrb	r2, [r7, #13]
 8001066:	429a      	cmp	r2, r3
 8001068:	d901      	bls.n	800106e <rfid_rc522_communicate_with_rfid_card+0x10e>
		{
			return STATUS_NO_ROOM;
 800106a:	2304      	movs	r3, #4
 800106c:	e05e      	b.n	800112c <rfid_rc522_communicate_with_rfid_card+0x1cc>
		}

		// Number of bytes returned
		*receive_byte_count = FIFODataReg_byte_count;
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	7b7a      	ldrb	r2, [r7, #13]
 8001072:	701a      	strb	r2, [r3, #0]
		// Get received data from FIFO
		rfid_rc522_read_many_data(FIFODataReg, receive_data, FIFODataReg_byte_count, rxAlign_value);
 8001074:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001078:	7b7a      	ldrb	r2, [r7, #13]
 800107a:	6a39      	ldr	r1, [r7, #32]
 800107c:	2012      	movs	r0, #18
 800107e:	f7ff fdc1 	bl	8000c04 <rfid_rc522_read_many_data>
		/**
		 * @brief _validBits:
		 * RxLastBits[2:0] indicates the number of valid bits in the last received byte.
		 * If this value is 000b, the whole byte is valid.
		 */
		_validBits = rfid_rc522_get_register_bit_mask(ControlReg, 0x07);
 8001082:	2107      	movs	r1, #7
 8001084:	2018      	movs	r0, #24
 8001086:	f7ff fe82 	bl	8000d8e <rfid_rc522_get_register_bit_mask>
 800108a:	4603      	mov	r3, r0
 800108c:	75bb      	strb	r3, [r7, #22]
		if (valid_bit)
 800108e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <rfid_rc522_communicate_with_rfid_card+0x13a>
		{
			*valid_bit = _validBits;
 8001094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001096:	7dba      	ldrb	r2, [r7, #22]
 8001098:	701a      	strb	r2, [r3, #0]
		}
	}

	// Tell about collisions
	if (ErrorReg_value & 0x08)	// 0x08 = CollErr
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <rfid_rc522_communicate_with_rfid_card+0x148>
	{	
		return STATUS_COLLISION;
 80010a4:	2302      	movs	r3, #2
 80010a6:	e041      	b.n	800112c <rfid_rc522_communicate_with_rfid_card+0x1cc>
	}

	// Perform CRC_A validation if requested.
	if (receive_data && receive_byte_count && check_crc)
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d03d      	beq.n	800112a <rfid_rc522_communicate_with_rfid_card+0x1ca>
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d03a      	beq.n	800112a <rfid_rc522_communicate_with_rfid_card+0x1ca>
 80010b4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d036      	beq.n	800112a <rfid_rc522_communicate_with_rfid_card+0x1ca>
	{
		// In this case a MIFARE Classic NAK is not OK.
		if (*receive_byte_count == 1 && _validBits == 4)
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d104      	bne.n	80010ce <rfid_rc522_communicate_with_rfid_card+0x16e>
 80010c4:	7dbb      	ldrb	r3, [r7, #22]
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	d101      	bne.n	80010ce <rfid_rc522_communicate_with_rfid_card+0x16e>
		{
			return STATUS_MIFARE_NACK;
 80010ca:	23ff      	movs	r3, #255	; 0xff
 80010cc:	e02e      	b.n	800112c <rfid_rc522_communicate_with_rfid_card+0x1cc>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*receive_byte_count < 2 || _validBits != 0)
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d902      	bls.n	80010dc <rfid_rc522_communicate_with_rfid_card+0x17c>
 80010d6:	7dbb      	ldrb	r3, [r7, #22]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <rfid_rc522_communicate_with_rfid_card+0x180>
		{
			return STATUS_CRC_WRONG;
 80010dc:	2307      	movs	r3, #7
 80010de:	e025      	b.n	800112c <rfid_rc522_communicate_with_rfid_card+0x1cc>
		}
		// Verify CRC_A - do our own calculation and store the control in crc_control_buffer.
		uint8_t crc_control_buffer[2];
		enum rfid_rc522_status_code status = rfid_rc522_calculate_crc(&receive_data[0], *receive_byte_count - 2, &crc_control_buffer[0]);
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	3b02      	subs	r3, #2
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f107 0208 	add.w	r2, r7, #8
 80010ec:	4619      	mov	r1, r3
 80010ee:	6a38      	ldr	r0, [r7, #32]
 80010f0:	f7ff fe62 	bl	8000db8 <rfid_rc522_calculate_crc>
 80010f4:	4603      	mov	r3, r0
 80010f6:	733b      	strb	r3, [r7, #12]
		if (status != STATUS_OK)
 80010f8:	7b3b      	ldrb	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <rfid_rc522_communicate_with_rfid_card+0x1a2>
		{
			return status;
 80010fe:	7b3b      	ldrb	r3, [r7, #12]
 8001100:	e014      	b.n	800112c <rfid_rc522_communicate_with_rfid_card+0x1cc>
		}
		if ((receive_data[*receive_byte_count - 2] != crc_control_buffer[0]) || (receive_data[*receive_byte_count - 1] != crc_control_buffer[1]))
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	3b02      	subs	r3, #2
 8001108:	6a3a      	ldr	r2, [r7, #32]
 800110a:	4413      	add	r3, r2
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	7a3b      	ldrb	r3, [r7, #8]
 8001110:	429a      	cmp	r2, r3
 8001112:	d108      	bne.n	8001126 <rfid_rc522_communicate_with_rfid_card+0x1c6>
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	3b01      	subs	r3, #1
 800111a:	6a3a      	ldr	r2, [r7, #32]
 800111c:	4413      	add	r3, r2
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	7a7b      	ldrb	r3, [r7, #9]
 8001122:	429a      	cmp	r2, r3
 8001124:	d001      	beq.n	800112a <rfid_rc522_communicate_with_rfid_card+0x1ca>
		{
			return STATUS_CRC_WRONG;
 8001126:	2307      	movs	r3, #7
 8001128:	e000      	b.n	800112c <rfid_rc522_communicate_with_rfid_card+0x1cc>
		}
	}
	
	return STATUS_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <rfid_card_request_A>:
 * @param	buffer_ATQA			The buffer to store the ATQA (Answer to request) in
 * @param	buffer_byte_count	Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
 * @return 	STATUS_OK on success, STATUS_??? otherwise.
 */
enum rfid_rc522_status_code rfid_card_request_A(uint8_t *buffer_ATQA, uint8_t *buffer_byte_count)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
	return rfid_card_REQA_or_WUPA(PICC_CMD_REQA, buffer_ATQA, buffer_byte_count);
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f000 f805 	bl	8001152 <rfid_card_REQA_or_WUPA>
 8001148:	4603      	mov	r3, r0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <rfid_card_REQA_or_WUPA>:
 * @param 	buffer_ATQA			The buffer to store the ATQA (Answer to request) in
 * @param	buffer_byte_count	Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
enum rfid_rc522_status_code rfid_card_REQA_or_WUPA(uint8_t command, uint8_t *buffer_ATQA, uint8_t *buffer_byte_count)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b08a      	sub	sp, #40	; 0x28
 8001156:	af04      	add	r7, sp, #16
 8001158:	4603      	mov	r3, r0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	73fb      	strb	r3, [r7, #15]
	uint8_t valid_bit;
	enum rfid_rc522_status_code command_status;
	
	// The ATQA response is 2 bytes long.
	if (buffer_ATQA == NULL || *buffer_byte_count < 2)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <rfid_card_REQA_or_WUPA+0x1c>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d801      	bhi.n	8001172 <rfid_card_REQA_or_WUPA+0x20>
	{
		return STATUS_NO_ROOM;
 800116e:	2304      	movs	r3, #4
 8001170:	e024      	b.n	80011bc <rfid_card_REQA_or_WUPA+0x6a>
	}

	// ValuesAfterColl=1 => Bits received after collision are cleared.
	rfid_rc522_clear_register_bit_mask(CollReg, 0x80);
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	201c      	movs	r0, #28
 8001176:	f7ff fdcf 	bl	8000d18 <rfid_rc522_clear_register_bit_mask>
	// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]	
	valid_bit = 7;
 800117a:	2307      	movs	r3, #7
 800117c:	75bb      	strb	r3, [r7, #22]
	command_status = rfid_rc522_transceive_data(&command, 1, buffer_ATQA, buffer_byte_count, &valid_bit, 0, false);
 800117e:	f107 000f 	add.w	r0, r7, #15
 8001182:	2300      	movs	r3, #0
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2300      	movs	r3, #0
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	f107 0316 	add.w	r3, r7, #22
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	2101      	movs	r1, #1
 8001196:	f7ff fec1 	bl	8000f1c <rfid_rc522_transceive_data>
 800119a:	4603      	mov	r3, r0
 800119c:	75fb      	strb	r3, [r7, #23]

	if (command_status != STATUS_OK)
 800119e:	7dfb      	ldrb	r3, [r7, #23]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <rfid_card_REQA_or_WUPA+0x56>
	{
		return command_status;
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	e009      	b.n	80011bc <rfid_card_REQA_or_WUPA+0x6a>
	}
	if (*buffer_byte_count != 2 || valid_bit != 0)	// ATQA must be exactly 16 bits.
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d102      	bne.n	80011b6 <rfid_card_REQA_or_WUPA+0x64>
 80011b0:	7dbb      	ldrb	r3, [r7, #22]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <rfid_card_REQA_or_WUPA+0x68>
	{		
		return STATUS_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <rfid_card_REQA_or_WUPA+0x6a>
	}
	return STATUS_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <rfid_rc522_read_serial>:
 * @param	uid	            Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
 *                          If set you must also supply uid->size. You must set the uid_bit_count, if give it 0 the command will run in loop.
 * @return 	STATUS_OK on success, STATUS_??? otherwise.
 */
enum rfid_rc522_status_code rfid_rc522_read_serial(struct UID *uid)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b090      	sub	sp, #64	; 0x40
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	6078      	str	r0, [r7, #4]
	bool uid_is_complete;
	bool select_is_done;
	uint8_t uid_bit_count = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t cascade_level = 1;
 80011d2:	2301      	movs	r3, #1
 80011d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
// Prepare MFRC522
	rfid_rc522_clear_register_bit_mask(CollReg, 0x80);		// ValuesAfterColl=1 => Bits received after collision are cleared.
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	201c      	movs	r0, #28
 80011dc:	f7ff fd9c 	bl	8000d18 <rfid_rc522_clear_register_bit_mask>
	
	// Repeat Cascade Level loop until we have a complete UID.
	uid_is_complete = false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while (uid_is_complete == false)
 80011e6:	e119      	b.n	800141c <rfid_rc522_read_serial+0x258>
	{
		card_command_array[0] = PICC_CMD_SEL_CL1;
 80011e8:	2393      	movs	r3, #147	; 0x93
 80011ea:	743b      	strb	r3, [r7, #16]
		uid_data_index = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 3020 	strb.w	r3, [r7, #32]
		
		// How many UID bits are known in this Cascade Level?
		current_level_uid_bit_count = uid_bit_count - (8 * uid_data_index);
 80011f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		select_is_done = false;
 8001206:	2300      	movs	r3, #0
 8001208:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		while (select_is_done == false)
 800120c:	e0c6      	b.n	800139c <rfid_rc522_read_serial+0x1d8>
			// the PICC will send back the complete UID_data, if there is,
			// We will go to ANTICOLLISION loop ie this while (select_is_done == false) loop
			// untill the collision is resolve then we can only go forward. If the collision is not
			// resolve, this algorithim can not pick one card out but will go to the eternal loop due to
			// it post-anticollison process that you will see down there.
			txLastBits_value			= current_level_uid_bit_count % 8; //4
 800120e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001212:	425a      	negs	r2, r3
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	f002 0207 	and.w	r2, r2, #7
 800121c:	bf58      	it	pl
 800121e:	4253      	negpl	r3, r2
 8001220:	b25b      	sxtb	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	73fb      	strb	r3, [r7, #15]
			count						= current_level_uid_bit_count / 8;	// Number of whole bytes in the UID part. //1
 8001226:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800122a:	2b00      	cmp	r3, #0
 800122c:	da00      	bge.n	8001230 <rfid_rc522_read_serial+0x6c>
 800122e:	3307      	adds	r3, #7
 8001230:	10db      	asrs	r3, r3, #3
 8001232:	b25b      	sxtb	r3, r3
 8001234:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			card_command_index			= 2 + count;						// Number of whole bytes: SEL + NVB + UIDs //3
 8001238:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800123c:	3302      	adds	r3, #2
 800123e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			card_command_array[1]		= (card_command_index << 4) + txLastBits_value;	// NVB - Number of Valid Bits //3B + 4b
 8001242:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	b2da      	uxtb	r2, r3
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	4413      	add	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	747b      	strb	r3, [r7, #17]
			card_command_byte_count		= card_command_index + (txLastBits_value ? 1 : 0);
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	bf14      	ite	ne
 8001258:	2301      	movne	r3, #1
 800125a:	2300      	moveq	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
 8001260:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001264:	4413      	add	r3, r2
 8001266:	77bb      	strb	r3, [r7, #30]

			// Store response in the unused part of card_command_array
			card_response_ptr			= &card_command_array[card_command_index];
 8001268:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800126c:	f107 0210 	add.w	r2, r7, #16
 8001270:	4413      	add	r3, r2
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
			card_response_byte_count	= sizeof(card_command_array) - card_command_index;
 8001274:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001278:	f1c3 0309 	rsb	r3, r3, #9
 800127c:	b2db      	uxtb	r3, r3
 800127e:	73bb      	strb	r3, [r7, #14]
			
			// Setting up the rfid_rc522 to send the card_command_array that
			// we prepare above.
			// Set bit adjustments
			// Having a separate variable is overkill. But it makes the next line easier to read.
			rxAlign_value = txLastBits_value;
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	777b      	strb	r3, [r7, #29]
			// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
			rfid_rc522_write_one_data(BitFramingReg, (rxAlign_value << 4) + txLastBits_value);
 8001284:	7f7b      	ldrb	r3, [r7, #29]
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	b2da      	uxtb	r2, r3
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	4413      	add	r3, r2
 800128e:	b2db      	uxtb	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	201a      	movs	r0, #26
 8001294:	f7ff fbee 	bl	8000a74 <rfid_rc522_write_one_data>
			
			// Transmit the card_command_array and receive the response.
			result_status = rfid_rc522_transceive_data(card_command_array, card_command_byte_count, card_response_ptr, &card_response_byte_count, &txLastBits_value, rxAlign_value, false);
 8001298:	f107 020e 	add.w	r2, r7, #14
 800129c:	7fb9      	ldrb	r1, [r7, #30]
 800129e:	f107 0010 	add.w	r0, r7, #16
 80012a2:	2300      	movs	r3, #0
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	7f7b      	ldrb	r3, [r7, #29]
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	f107 030f 	add.w	r3, r7, #15
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	4613      	mov	r3, r2
 80012b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012b4:	f7ff fe32 	bl	8000f1c <rfid_rc522_transceive_data>
 80012b8:	4603      	mov	r3, r0
 80012ba:	773b      	strb	r3, [r7, #28]
			
			// If there is more than one PICC in the field => collision.
			// This is our post-collision procedure.
			if (result_status == STATUS_COLLISION)
 80012bc:	7f3b      	ldrb	r3, [r7, #28]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d164      	bne.n	800138c <rfid_rc522_read_serial+0x1c8>
			{ 
				// CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
				uint8_t CollReg_data = rfid_rc522_read_one_data(CollReg);
 80012c2:	201c      	movs	r0, #28
 80012c4:	f7ff fc72 	bl	8000bac <rfid_rc522_read_one_data>
 80012c8:	4603      	mov	r3, r0
 80012ca:	76fb      	strb	r3, [r7, #27]
				// CollPosNotValid
				if (CollReg_data & 0x20)
 80012cc:	7efb      	ldrb	r3, [r7, #27]
 80012ce:	f003 0320 	and.w	r3, r3, #32
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <rfid_rc522_read_serial+0x116>
				{ 
					// Without a valid collision position we cannot continue
					return STATUS_COLLISION; 
 80012d6:	2302      	movs	r3, #2
 80012d8:	e0b3      	b.n	8001442 <rfid_rc522_read_serial+0x27e>
				}
				// Values 0-31, 0 means bit 32.
				uint8_t CollPos_value = CollReg_data & 0x1F;
 80012da:	7efb      	ldrb	r3, [r7, #27]
 80012dc:	f003 031f 	and.w	r3, r3, #31
 80012e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if (CollPos_value == 0)
 80012e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <rfid_rc522_read_serial+0x12e>
				{
					CollPos_value = 32;
 80012ec:	2320      	movs	r3, #32
 80012ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
				// No progress - should not happen 
				if (CollPos_value <= current_level_uid_bit_count)
 80012f2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dc01      	bgt.n	8001302 <rfid_rc522_read_serial+0x13e>
				{ 
					return STATUS_INTERNAL_ERROR;
 80012fe:	2305      	movs	r3, #5
 8001300:	e09f      	b.n	8001442 <rfid_rc522_read_serial+0x27e>

				// After able to dettect collision, we choose the PICC.
				// FIRST, we set up the card_command_buffer so that we
				// continue send the already reapeted byte and bit.
				//Ex = 12b -> 1B + 4b 
				current_level_uid_bit_count				= CollPos_value;
 8001302:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				// The bit to modify
				count									= current_level_uid_bit_count % 8; //4
 800130a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800130e:	425a      	negs	r2, r3
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	f002 0207 	and.w	r2, r2, #7
 8001318:	bf58      	it	pl
 800131a:	4253      	negpl	r3, r2
 800131c:	b25b      	sxtb	r3, r3
 800131e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				check_bit								= (current_level_uid_bit_count - 1) % 8; //3
 8001322:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001326:	3b01      	subs	r3, #1
 8001328:	425a      	negs	r2, r3
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	f002 0207 	and.w	r2, r2, #7
 8001332:	bf58      	it	pl
 8001334:	4253      	negpl	r3, r2
 8001336:	76bb      	strb	r3, [r7, #26]
				// First byte is card_command_index 0.
				// If = 3B => 1B SEL + 1B NVB + 1B uid_data + 1B uid_data collision
				card_command_index						= 1 + (current_level_uid_bit_count / 8) + (count ? 1 : 0);
 8001338:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800133c:	2b00      	cmp	r3, #0
 800133e:	da00      	bge.n	8001342 <rfid_rc522_read_serial+0x17e>
 8001340:	3307      	adds	r3, #7
 8001342:	10db      	asrs	r3, r3, #3
 8001344:	b25b      	sxtb	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800134c:	2a00      	cmp	r2, #0
 800134e:	bf14      	ite	ne
 8001350:	2201      	movne	r2, #1
 8001352:	2200      	moveq	r2, #0
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	4413      	add	r3, r2
 8001358:	b2db      	uxtb	r3, r3
 800135a:	3301      	adds	r3, #1
 800135c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				// no collision at all!
				// If the collision is still happen, as you can see the no PICC will be able to select
				// since at the collision bit position, we default it = 1. So the only way for any PICC
				// to be selected is collision is resolved.
				// If CollPoss = 4 in that byte, check_bit = 3, xxxx x[repeated bit] | 0000 1000
				card_command_array[card_command_index]	|= (1 << check_bit);
 8001360:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	443b      	add	r3, r7
 8001368:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800136c:	b25a      	sxtb	r2, r3
 800136e:	7ebb      	ldrb	r3, [r7, #26]
 8001370:	2101      	movs	r1, #1
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	b25b      	sxtb	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b25a      	sxtb	r2, r3
 800137c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	3330      	adds	r3, #48	; 0x30
 8001384:	443b      	add	r3, r7
 8001386:	f803 2c20 	strb.w	r2, [r3, #-32]
 800138a:	e007      	b.n	800139c <rfid_rc522_read_serial+0x1d8>
			}
			else if (result_status != STATUS_OK)
 800138c:	7f3b      	ldrb	r3, [r7, #28]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <rfid_rc522_read_serial+0x1d2>
			{
				return result_status;
 8001392:	7f3b      	ldrb	r3, [r7, #28]
 8001394:	e055      	b.n	8001442 <rfid_rc522_read_serial+0x27e>
			}
			else // STATUS_OK
			{ 
				// This was a SELECT. 
				select_is_done = true;
 8001396:	2301      	movs	r3, #1
 8001398:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		while (select_is_done == false)
 800139c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80013a0:	f083 0301 	eor.w	r3, r3, #1
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f47f af31 	bne.w	800120e <rfid_rc522_read_serial+0x4a>
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from card_command_array[] to uid->uidByte[]
		// 
		uint8_t uid_bytes_to_copy;
		card_command_index	= (card_command_array[2] == PICC_CMD_CT) ? 3 : 2; // source index in card_command_array[]
 80013ac:	7cbb      	ldrb	r3, [r7, #18]
 80013ae:	2b88      	cmp	r3, #136	; 0x88
 80013b0:	d101      	bne.n	80013b6 <rfid_rc522_read_serial+0x1f2>
 80013b2:	2303      	movs	r3, #3
 80013b4:	e000      	b.n	80013b8 <rfid_rc522_read_serial+0x1f4>
 80013b6:	2302      	movs	r3, #2
 80013b8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		uid_bytes_to_copy	= (card_command_array[2] == PICC_CMD_CT) ? 3 : 4;
 80013bc:	7cbb      	ldrb	r3, [r7, #18]
 80013be:	2b88      	cmp	r3, #136	; 0x88
 80013c0:	d101      	bne.n	80013c6 <rfid_rc522_read_serial+0x202>
 80013c2:	2303      	movs	r3, #3
 80013c4:	e000      	b.n	80013c8 <rfid_rc522_read_serial+0x204>
 80013c6:	2304      	movs	r3, #4
 80013c8:	77fb      	strb	r3, [r7, #31]
		for (count = 0; count < uid_bytes_to_copy; count++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80013d0:	e018      	b.n	8001404 <rfid_rc522_read_serial+0x240>
		{
			uid->data_array[uid_data_index + count] = card_command_array[card_command_index++];
 80013d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 80013dc:	4619      	mov	r1, r3
 80013de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80013e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013e6:	4413      	add	r3, r2
 80013e8:	f101 0230 	add.w	r2, r1, #48	; 0x30
 80013ec:	443a      	add	r2, r7
 80013ee:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	460a      	mov	r2, r1
 80013f8:	705a      	strb	r2, [r3, #1]
		for (count = 0; count < uid_bytes_to_copy; count++)
 80013fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013fe:	3301      	adds	r3, #1
 8001400:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001404:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001408:	7ffb      	ldrb	r3, [r7, #31]
 800140a:	429a      	cmp	r2, r3
 800140c:	d3e1      	bcc.n	80013d2 <rfid_rc522_read_serial+0x20e>
		}

		// Verify CRC_A - do our own calculation and store the control in card_command_array[2..3] - those bytes are not needed anymore.
		uid_is_complete = true;
 800140e:	2301      	movs	r3, #1
 8001410:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uid->select_acknowledge_data = card_response_ptr[0];
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	781a      	ldrb	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	715a      	strb	r2, [r3, #5]
	while (uid_is_complete == false)
 800141c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001420:	f083 0301 	eor.w	r3, r3, #1
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	f47f aede 	bne.w	80011e8 <rfid_rc522_read_serial+0x24>
	} // End of while (!uid_is_complete)
	
	// Set correct uid->size
	uid->byte_count = 3 * cascade_level + 1;
 800142c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001430:	461a      	mov	r2, r3
 8001432:	0052      	lsls	r2, r2, #1
 8001434:	4413      	add	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	3301      	adds	r3, #1
 800143a:	b2da      	uxtb	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <rfid_rc522_wait_for_card>:
/////////////////////////////////////////////////////////////////////////////////////
/**
 * @brief	Wait for card 
*/
enum rfid_rc522_status_code rfid_rc522_wait_for_card()
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
	uint8_t buffer_ATQA[2];
	uint8_t buffer_byte_count = sizeof(buffer_ATQA);
 8001450:	2302      	movs	r3, #2
 8001452:	70fb      	strb	r3, [r7, #3]

	enum rfid_rc522_status_code result = rfid_card_request_A(buffer_ATQA, &buffer_byte_count);
 8001454:	1cfa      	adds	r2, r7, #3
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fe6a 	bl	8001134 <rfid_card_request_A>
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
	return (result == STATUS_OK || result == STATUS_COLLISION );
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <rfid_rc522_wait_for_card+0x26>
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b02      	cmp	r3, #2
 800146e:	d101      	bne.n	8001474 <rfid_rc522_wait_for_card+0x2a>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <rfid_rc522_wait_for_card+0x2c>
 8001474:	2300      	movs	r3, #0
 8001476:	b2db      	uxtb	r3, r3
} // End PICC_IsNewCardPresent()
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <HAL_MspInit+0x5c>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a14      	ldr	r2, [pc, #80]	; (80014dc <HAL_MspInit+0x5c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <HAL_MspInit+0x5c>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_MspInit+0x5c>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_MspInit+0x5c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x5c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_MspInit+0x60>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <HAL_MspInit+0x60>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	3714      	adds	r7, #20
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000

080014e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <HAL_I2C_MspInit+0x90>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d132      	bne.n	800156a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_I2C_MspInit+0x94>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a1b      	ldr	r2, [pc, #108]	; (8001578 <HAL_I2C_MspInit+0x94>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_I2C_MspInit+0x94>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800151c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001522:	2312      	movs	r3, #18
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4812      	ldr	r0, [pc, #72]	; (800157c <HAL_I2C_MspInit+0x98>)
 8001532:	f000 fa0d 	bl	8001950 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001536:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_I2C_MspInit+0x9c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
 800154c:	4a0c      	ldr	r2, [pc, #48]	; (8001580 <HAL_I2C_MspInit+0x9c>)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_I2C_MspInit+0x94>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_I2C_MspInit+0x94>)
 8001558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800155c:	61d3      	str	r3, [r2, #28]
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_I2C_MspInit+0x94>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40005400 	.word	0x40005400
 8001578:	40021000 	.word	0x40021000
 800157c:	40010c00 	.word	0x40010c00
 8001580:	40010000 	.word	0x40010000

08001584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0310 	add.w	r3, r7, #16
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <HAL_SPI_MspInit+0x8c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d131      	bne.n	8001608 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_SPI_MspInit+0x90>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_SPI_MspInit+0x90>)
 80015aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ae:	61d3      	str	r3, [r2, #28]
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_SPI_MspInit+0x90>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_SPI_MspInit+0x90>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_SPI_MspInit+0x90>)
 80015c2:	f043 0308 	orr.w	r3, r3, #8
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_SPI_MspInit+0x90>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80015d4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80015d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	4619      	mov	r1, r3
 80015e8:	480b      	ldr	r0, [pc, #44]	; (8001618 <HAL_SPI_MspInit+0x94>)
 80015ea:	f000 f9b1 	bl	8001950 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0310 	add.w	r3, r7, #16
 8001600:	4619      	mov	r1, r3
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <HAL_SPI_MspInit+0x94>)
 8001604:	f000 f9a4 	bl	8001950 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3720      	adds	r7, #32
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40003800 	.word	0x40003800
 8001614:	40021000 	.word	0x40021000
 8001618:	40010c00 	.word	0x40010c00

0800161c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <NMI_Handler+0x4>

08001622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <MemManage_Handler+0x4>

0800162e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <UsageFault_Handler+0x4>

0800163a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001662:	f000 f875 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}

0800166a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	bc80      	pop	{r7}
 8001674:	4770      	bx	lr
	...

08001678 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001678:	f7ff fff7 	bl	800166a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800167c:	480b      	ldr	r0, [pc, #44]	; (80016ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800167e:	490c      	ldr	r1, [pc, #48]	; (80016b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001680:	4a0c      	ldr	r2, [pc, #48]	; (80016b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a09      	ldr	r2, [pc, #36]	; (80016b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001694:	4c09      	ldr	r4, [pc, #36]	; (80016bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a2:	f001 ffaf 	bl	8003604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016a6:	f7ff f899 	bl	80007dc <main>
  bx lr
 80016aa:	4770      	bx	lr
  ldr r0, =_sdata
 80016ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016b4:	080036f0 	.word	0x080036f0
  ldr r2, =_sbss
 80016b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016bc:	200000e4 	.word	0x200000e4

080016c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC1_2_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_Init+0x28>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_Init+0x28>)
 80016ce:	f043 0310 	orr.w	r3, r3, #16
 80016d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f907 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	200f      	movs	r0, #15
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff fece 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40022000 	.word	0x40022000

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f911 	bl	8001936 <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f8e7 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000000 	.word	0x20000000
 8001748:	20000008 	.word	0x20000008
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_IncTick+0x1c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_IncTick+0x20>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <HAL_IncTick+0x20>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000008 	.word	0x20000008
 8001770:	200000e0 	.word	0x200000e0

08001774 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b02      	ldr	r3, [pc, #8]	; (8001784 <HAL_GetTick+0x10>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	200000e0 	.word	0x200000e0

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	db0a      	blt.n	8001816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	b2da      	uxtb	r2, r3
 8001804:	490c      	ldr	r1, [pc, #48]	; (8001838 <__NVIC_SetPriority+0x4c>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	0112      	lsls	r2, r2, #4
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	440b      	add	r3, r1
 8001810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001814:	e00a      	b.n	800182c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4908      	ldr	r1, [pc, #32]	; (800183c <__NVIC_SetPriority+0x50>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 030f 	and.w	r3, r3, #15
 8001822:	3b04      	subs	r3, #4
 8001824:	0112      	lsls	r2, r2, #4
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	440b      	add	r3, r1
 800182a:	761a      	strb	r2, [r3, #24]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001840:	b480      	push	{r7}
 8001842:	b089      	sub	sp, #36	; 0x24
 8001844:	af00      	add	r7, sp, #0
 8001846:	60f8      	str	r0, [r7, #12]
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f1c3 0307 	rsb	r3, r3, #7
 800185a:	2b04      	cmp	r3, #4
 800185c:	bf28      	it	cs
 800185e:	2304      	movcs	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3304      	adds	r3, #4
 8001866:	2b06      	cmp	r3, #6
 8001868:	d902      	bls.n	8001870 <NVIC_EncodePriority+0x30>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3b03      	subs	r3, #3
 800186e:	e000      	b.n	8001872 <NVIC_EncodePriority+0x32>
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001874:	f04f 32ff 	mov.w	r2, #4294967295
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	43d9      	mvns	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	4313      	orrs	r3, r2
         );
}
 800189a:	4618      	mov	r0, r3
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f7ff ff90 	bl	80017ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff49 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff5e 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff90 	bl	8001840 <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5f 	bl	80017ec <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f7ff ffb0 	bl	80018a4 <SysTick_Config>
 8001944:	4603      	mov	r3, r0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001950:	b480      	push	{r7}
 8001952:	b08b      	sub	sp, #44	; 0x2c
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001962:	e169      	b.n	8001c38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001964:	2201      	movs	r2, #1
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	69fa      	ldr	r2, [r7, #28]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	429a      	cmp	r2, r3
 800197e:	f040 8158 	bne.w	8001c32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	4a9a      	ldr	r2, [pc, #616]	; (8001bf0 <HAL_GPIO_Init+0x2a0>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d05e      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 800198c:	4a98      	ldr	r2, [pc, #608]	; (8001bf0 <HAL_GPIO_Init+0x2a0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d875      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 8001992:	4a98      	ldr	r2, [pc, #608]	; (8001bf4 <HAL_GPIO_Init+0x2a4>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d058      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 8001998:	4a96      	ldr	r2, [pc, #600]	; (8001bf4 <HAL_GPIO_Init+0x2a4>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d86f      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 800199e:	4a96      	ldr	r2, [pc, #600]	; (8001bf8 <HAL_GPIO_Init+0x2a8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d052      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 80019a4:	4a94      	ldr	r2, [pc, #592]	; (8001bf8 <HAL_GPIO_Init+0x2a8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d869      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019aa:	4a94      	ldr	r2, [pc, #592]	; (8001bfc <HAL_GPIO_Init+0x2ac>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d04c      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 80019b0:	4a92      	ldr	r2, [pc, #584]	; (8001bfc <HAL_GPIO_Init+0x2ac>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d863      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019b6:	4a92      	ldr	r2, [pc, #584]	; (8001c00 <HAL_GPIO_Init+0x2b0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d046      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
 80019bc:	4a90      	ldr	r2, [pc, #576]	; (8001c00 <HAL_GPIO_Init+0x2b0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d85d      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019c2:	2b12      	cmp	r3, #18
 80019c4:	d82a      	bhi.n	8001a1c <HAL_GPIO_Init+0xcc>
 80019c6:	2b12      	cmp	r3, #18
 80019c8:	d859      	bhi.n	8001a7e <HAL_GPIO_Init+0x12e>
 80019ca:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <HAL_GPIO_Init+0x80>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	08001a4b 	.word	0x08001a4b
 80019d4:	08001a25 	.word	0x08001a25
 80019d8:	08001a37 	.word	0x08001a37
 80019dc:	08001a79 	.word	0x08001a79
 80019e0:	08001a7f 	.word	0x08001a7f
 80019e4:	08001a7f 	.word	0x08001a7f
 80019e8:	08001a7f 	.word	0x08001a7f
 80019ec:	08001a7f 	.word	0x08001a7f
 80019f0:	08001a7f 	.word	0x08001a7f
 80019f4:	08001a7f 	.word	0x08001a7f
 80019f8:	08001a7f 	.word	0x08001a7f
 80019fc:	08001a7f 	.word	0x08001a7f
 8001a00:	08001a7f 	.word	0x08001a7f
 8001a04:	08001a7f 	.word	0x08001a7f
 8001a08:	08001a7f 	.word	0x08001a7f
 8001a0c:	08001a7f 	.word	0x08001a7f
 8001a10:	08001a7f 	.word	0x08001a7f
 8001a14:	08001a2d 	.word	0x08001a2d
 8001a18:	08001a41 	.word	0x08001a41
 8001a1c:	4a79      	ldr	r2, [pc, #484]	; (8001c04 <HAL_GPIO_Init+0x2b4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a22:	e02c      	b.n	8001a7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	623b      	str	r3, [r7, #32]
          break;
 8001a2a:	e029      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	3304      	adds	r3, #4
 8001a32:	623b      	str	r3, [r7, #32]
          break;
 8001a34:	e024      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	3308      	adds	r3, #8
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e01f      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	330c      	adds	r3, #12
 8001a46:	623b      	str	r3, [r7, #32]
          break;
 8001a48:	e01a      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d102      	bne.n	8001a58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a52:	2304      	movs	r3, #4
 8001a54:	623b      	str	r3, [r7, #32]
          break;
 8001a56:	e013      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d105      	bne.n	8001a6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a60:	2308      	movs	r3, #8
 8001a62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69fa      	ldr	r2, [r7, #28]
 8001a68:	611a      	str	r2, [r3, #16]
          break;
 8001a6a:	e009      	b.n	8001a80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	615a      	str	r2, [r3, #20]
          break;
 8001a76:	e003      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x130>
          break;
 8001a7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	2bff      	cmp	r3, #255	; 0xff
 8001a84:	d801      	bhi.n	8001a8a <HAL_GPIO_Init+0x13a>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	e001      	b.n	8001a8e <HAL_GPIO_Init+0x13e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	2bff      	cmp	r3, #255	; 0xff
 8001a94:	d802      	bhi.n	8001a9c <HAL_GPIO_Init+0x14c>
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0x152>
 8001a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9e:	3b08      	subs	r3, #8
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	210f      	movs	r1, #15
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	6a39      	ldr	r1, [r7, #32]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	431a      	orrs	r2, r3
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80b1 	beq.w	8001c32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad0:	4b4d      	ldr	r3, [pc, #308]	; (8001c08 <HAL_GPIO_Init+0x2b8>)
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	4a4c      	ldr	r2, [pc, #304]	; (8001c08 <HAL_GPIO_Init+0x2b8>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6193      	str	r3, [r2, #24]
 8001adc:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <HAL_GPIO_Init+0x2b8>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae8:	4a48      	ldr	r2, [pc, #288]	; (8001c0c <HAL_GPIO_Init+0x2bc>)
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	3302      	adds	r3, #2
 8001af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	f003 0303 	and.w	r3, r3, #3
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a40      	ldr	r2, [pc, #256]	; (8001c10 <HAL_GPIO_Init+0x2c0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d013      	beq.n	8001b3c <HAL_GPIO_Init+0x1ec>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a3f      	ldr	r2, [pc, #252]	; (8001c14 <HAL_GPIO_Init+0x2c4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00d      	beq.n	8001b38 <HAL_GPIO_Init+0x1e8>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a3e      	ldr	r2, [pc, #248]	; (8001c18 <HAL_GPIO_Init+0x2c8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d007      	beq.n	8001b34 <HAL_GPIO_Init+0x1e4>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a3d      	ldr	r2, [pc, #244]	; (8001c1c <HAL_GPIO_Init+0x2cc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d101      	bne.n	8001b30 <HAL_GPIO_Init+0x1e0>
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e006      	b.n	8001b3e <HAL_GPIO_Init+0x1ee>
 8001b30:	2304      	movs	r3, #4
 8001b32:	e004      	b.n	8001b3e <HAL_GPIO_Init+0x1ee>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e002      	b.n	8001b3e <HAL_GPIO_Init+0x1ee>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_GPIO_Init+0x1ee>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b40:	f002 0203 	and.w	r2, r2, #3
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	4093      	lsls	r3, r2
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b4e:	492f      	ldr	r1, [pc, #188]	; (8001c0c <HAL_GPIO_Init+0x2bc>)
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	492c      	ldr	r1, [pc, #176]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	4928      	ldr	r1, [pc, #160]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b90:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	4922      	ldr	r1, [pc, #136]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b9e:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	491e      	ldr	r1, [pc, #120]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bb8:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	4918      	ldr	r1, [pc, #96]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e006      	b.n	8001bd4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	4914      	ldr	r1, [pc, #80]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d021      	beq.n	8001c24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	490e      	ldr	r1, [pc, #56]	; (8001c20 <HAL_GPIO_Init+0x2d0>)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
 8001bec:	e021      	b.n	8001c32 <HAL_GPIO_Init+0x2e2>
 8001bee:	bf00      	nop
 8001bf0:	10320000 	.word	0x10320000
 8001bf4:	10310000 	.word	0x10310000
 8001bf8:	10220000 	.word	0x10220000
 8001bfc:	10210000 	.word	0x10210000
 8001c00:	10120000 	.word	0x10120000
 8001c04:	10110000 	.word	0x10110000
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010000 	.word	0x40010000
 8001c10:	40010800 	.word	0x40010800
 8001c14:	40010c00 	.word	0x40010c00
 8001c18:	40011000 	.word	0x40011000
 8001c1c:	40011400 	.word	0x40011400
 8001c20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	4909      	ldr	r1, [pc, #36]	; (8001c54 <HAL_GPIO_Init+0x304>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	3301      	adds	r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f47f ae8e 	bne.w	8001964 <HAL_GPIO_Init+0x14>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	372c      	adds	r7, #44	; 0x2c
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	40010400 	.word	0x40010400

08001c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
 8001c64:	4613      	mov	r3, r2
 8001c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c68:	787b      	ldrb	r3, [r7, #1]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6e:	887a      	ldrh	r2, [r7, #2]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c74:	e003      	b.n	8001c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	041a      	lsls	r2, r3, #16
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	611a      	str	r2, [r3, #16]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e12b      	b.n	8001ef2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fc18 	bl	80014e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	; 0x24
 8001cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cda:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cec:	f001 f832 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 8001cf0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4a81      	ldr	r2, [pc, #516]	; (8001efc <HAL_I2C_Init+0x274>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d807      	bhi.n	8001d0c <HAL_I2C_Init+0x84>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <HAL_I2C_Init+0x278>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	bf94      	ite	ls
 8001d04:	2301      	movls	r3, #1
 8001d06:	2300      	movhi	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	e006      	b.n	8001d1a <HAL_I2C_Init+0x92>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4a7d      	ldr	r2, [pc, #500]	; (8001f04 <HAL_I2C_Init+0x27c>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	bf94      	ite	ls
 8001d14:	2301      	movls	r3, #1
 8001d16:	2300      	movhi	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e0e7      	b.n	8001ef2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4a78      	ldr	r2, [pc, #480]	; (8001f08 <HAL_I2C_Init+0x280>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	0c9b      	lsrs	r3, r3, #18
 8001d2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a6a      	ldr	r2, [pc, #424]	; (8001efc <HAL_I2C_Init+0x274>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d802      	bhi.n	8001d5c <HAL_I2C_Init+0xd4>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	e009      	b.n	8001d70 <HAL_I2C_Init+0xe8>
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	4a69      	ldr	r2, [pc, #420]	; (8001f0c <HAL_I2C_Init+0x284>)
 8001d68:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6c:	099b      	lsrs	r3, r3, #6
 8001d6e:	3301      	adds	r3, #1
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6812      	ldr	r2, [r2, #0]
 8001d74:	430b      	orrs	r3, r1
 8001d76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	495c      	ldr	r1, [pc, #368]	; (8001efc <HAL_I2C_Init+0x274>)
 8001d8c:	428b      	cmp	r3, r1
 8001d8e:	d819      	bhi.n	8001dc4 <HAL_I2C_Init+0x13c>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1e59      	subs	r1, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d9e:	1c59      	adds	r1, r3, #1
 8001da0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001da4:	400b      	ands	r3, r1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00a      	beq.n	8001dc0 <HAL_I2C_Init+0x138>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1e59      	subs	r1, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbe:	e051      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	e04f      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d111      	bne.n	8001df0 <HAL_I2C_Init+0x168>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	440b      	add	r3, r1
 8001dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dde:	3301      	adds	r3, #1
 8001de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	e012      	b.n	8001e16 <HAL_I2C_Init+0x18e>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1e58      	subs	r0, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6859      	ldr	r1, [r3, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	0099      	lsls	r1, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Init+0x196>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e022      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10e      	bne.n	8001e44 <HAL_I2C_Init+0x1bc>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1e58      	subs	r0, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6859      	ldr	r1, [r3, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	440b      	add	r3, r1
 8001e34:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e42:	e00f      	b.n	8001e64 <HAL_I2C_Init+0x1dc>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	1e58      	subs	r0, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	0099      	lsls	r1, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a1b      	ldr	r3, [r3, #32]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6911      	ldr	r1, [r2, #16]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	68d2      	ldr	r2, [r2, #12]
 8001e9e:	4311      	orrs	r1, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	000186a0 	.word	0x000186a0
 8001f00:	001e847f 	.word	0x001e847f
 8001f04:	003d08ff 	.word	0x003d08ff
 8001f08:	431bde83 	.word	0x431bde83
 8001f0c:	10624dd3 	.word	0x10624dd3

08001f10 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	817b      	strh	r3, [r7, #10]
 8001f20:	4613      	mov	r3, r2
 8001f22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7ff fc26 	bl	8001774 <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	f040 80e0 	bne.w	80020f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2319      	movs	r3, #25
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4970      	ldr	r1, [pc, #448]	; (8002104 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f964 	bl	8002210 <I2C_WaitOnFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e0d3      	b.n	80020fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2C_Master_Transmit+0x50>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e0cc      	b.n	80020fa <HAL_I2C_Master_Transmit+0x1ea>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d007      	beq.n	8001f86 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2221      	movs	r2, #33	; 0x21
 8001f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2210      	movs	r2, #16
 8001fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	893a      	ldrh	r2, [r7, #8]
 8001fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4a50      	ldr	r2, [pc, #320]	; (8002108 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fc8:	8979      	ldrh	r1, [r7, #10]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	6a3a      	ldr	r2, [r7, #32]
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f89c 	bl	800210c <I2C_MasterRequestWrite>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e08d      	b.n	80020fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ff4:	e066      	b.n	80020c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	6a39      	ldr	r1, [r7, #32]
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fa22 	bl	8002444 <I2C_WaitOnTXEFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00d      	beq.n	8002022 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2b04      	cmp	r3, #4
 800200c:	d107      	bne.n	800201e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e06b      	b.n	80020fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b04      	cmp	r3, #4
 800205e:	d11b      	bne.n	8002098 <HAL_I2C_Master_Transmit+0x188>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	2b00      	cmp	r3, #0
 8002066:	d017      	beq.n	8002098 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	6a39      	ldr	r1, [r7, #32]
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 fa19 	bl	80024d4 <I2C_WaitOnBTFFlagUntilTimeout>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d00d      	beq.n	80020c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d107      	bne.n	80020c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e01a      	b.n	80020fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d194      	bne.n	8001ff6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	e000      	b.n	80020fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
  }
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	00100002 	.word	0x00100002
 8002108:	ffff0000 	.word	0xffff0000

0800210c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	603b      	str	r3, [r7, #0]
 8002118:	460b      	mov	r3, r1
 800211a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b08      	cmp	r3, #8
 8002126:	d006      	beq.n	8002136 <I2C_MasterRequestWrite+0x2a>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d003      	beq.n	8002136 <I2C_MasterRequestWrite+0x2a>
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002134:	d108      	bne.n	8002148 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e00b      	b.n	8002160 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	2b12      	cmp	r3, #18
 800214e:	d107      	bne.n	8002160 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800215e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f000 f84f 	bl	8002210 <I2C_WaitOnFlagUntilTimeout>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002186:	d103      	bne.n	8002190 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800218e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e035      	b.n	8002200 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	691b      	ldr	r3, [r3, #16]
 8002198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800219c:	d108      	bne.n	80021b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800219e:	897b      	ldrh	r3, [r7, #10]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021ac:	611a      	str	r2, [r3, #16]
 80021ae:	e01b      	b.n	80021e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021b0:	897b      	ldrh	r3, [r7, #10]
 80021b2:	11db      	asrs	r3, r3, #7
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f003 0306 	and.w	r3, r3, #6
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f063 030f 	orn	r3, r3, #15
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	490e      	ldr	r1, [pc, #56]	; (8002208 <I2C_MasterRequestWrite+0xfc>)
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f898 	bl	8002304 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e010      	b.n	8002200 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021de:	897b      	ldrh	r3, [r7, #10]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <I2C_MasterRequestWrite+0x100>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f888 	bl	8002304 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	00010008 	.word	0x00010008
 800220c:	00010002 	.word	0x00010002

08002210 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4613      	mov	r3, r2
 800221e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002220:	e048      	b.n	80022b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002228:	d044      	beq.n	80022b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222a:	f7ff faa3 	bl	8001774 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d302      	bcc.n	8002240 <I2C_WaitOnFlagUntilTimeout+0x30>
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d139      	bne.n	80022b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10d      	bne.n	8002266 <I2C_WaitOnFlagUntilTimeout+0x56>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	43da      	mvns	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4013      	ands	r3, r2
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	461a      	mov	r2, r3
 8002264:	e00c      	b.n	8002280 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	43da      	mvns	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	4013      	ands	r3, r2
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	bf0c      	ite	eq
 8002278:	2301      	moveq	r3, #1
 800227a:	2300      	movne	r3, #0
 800227c:	b2db      	uxtb	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	429a      	cmp	r2, r3
 8002284:	d116      	bne.n	80022b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2200      	movs	r2, #0
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2220      	movs	r2, #32
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e023      	b.n	80022fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	0c1b      	lsrs	r3, r3, #16
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d10d      	bne.n	80022da <I2C_WaitOnFlagUntilTimeout+0xca>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	43da      	mvns	r2, r3
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	4013      	ands	r3, r2
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf0c      	ite	eq
 80022d0:	2301      	moveq	r3, #1
 80022d2:	2300      	movne	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	e00c      	b.n	80022f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	43da      	mvns	r2, r3
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4013      	ands	r3, r2
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf0c      	ite	eq
 80022ec:	2301      	moveq	r3, #1
 80022ee:	2300      	movne	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d093      	beq.n	8002222 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
 8002310:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002312:	e071      	b.n	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002322:	d123      	bne.n	800236c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800233c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	f043 0204 	orr.w	r2, r3, #4
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e067      	b.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002372:	d041      	beq.n	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002374:	f7ff f9fe 	bl	8001774 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d302      	bcc.n	800238a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d136      	bne.n	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	0c1b      	lsrs	r3, r3, #16
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d10c      	bne.n	80023ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4013      	ands	r3, r2
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	bf14      	ite	ne
 80023a6:	2301      	movne	r3, #1
 80023a8:	2300      	moveq	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	e00b      	b.n	80023c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	43da      	mvns	r2, r3
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	4013      	ands	r3, r2
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e4:	f043 0220 	orr.w	r2, r3, #32
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e021      	b.n	800243c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	0c1b      	lsrs	r3, r3, #16
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10c      	bne.n	800241c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	43da      	mvns	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	4013      	ands	r3, r2
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf14      	ite	ne
 8002414:	2301      	movne	r3, #1
 8002416:	2300      	moveq	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	e00b      	b.n	8002434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	43da      	mvns	r2, r3
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4013      	ands	r3, r2
 8002428:	b29b      	uxth	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	f47f af6d 	bne.w	8002314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002450:	e034      	b.n	80024bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 f886 	bl	8002564 <I2C_IsAcknowledgeFailed>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e034      	b.n	80024cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d028      	beq.n	80024bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246a:	f7ff f983 	bl	8001774 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d302      	bcc.n	8002480 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11d      	bne.n	80024bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	2b80      	cmp	r3, #128	; 0x80
 800248c:	d016      	beq.n	80024bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f043 0220 	orr.w	r2, r3, #32
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e007      	b.n	80024cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b80      	cmp	r3, #128	; 0x80
 80024c8:	d1c3      	bne.n	8002452 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024e0:	e034      	b.n	800254c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f83e 	bl	8002564 <I2C_IsAcknowledgeFailed>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e034      	b.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d028      	beq.n	800254c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fa:	f7ff f93b 	bl	8001774 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11d      	bne.n	800254c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b04      	cmp	r3, #4
 800251c:	d016      	beq.n	800254c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f043 0220 	orr.w	r2, r3, #32
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e007      	b.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b04      	cmp	r3, #4
 8002558:	d1c3      	bne.n	80024e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002576:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800257a:	d11b      	bne.n	80025b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002584:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f043 0204 	orr.w	r2, r3, #4
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e272      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e0:	4b92      	ldr	r3, [pc, #584]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d00c      	beq.n	8002606 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ec:	4b8f      	ldr	r3, [pc, #572]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d112      	bne.n	800261e <HAL_RCC_OscConfig+0x5e>
 80025f8:	4b8c      	ldr	r3, [pc, #560]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d10b      	bne.n	800261e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002606:	4b89      	ldr	r3, [pc, #548]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d06c      	beq.n	80026ec <HAL_RCC_OscConfig+0x12c>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d168      	bne.n	80026ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e24c      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002626:	d106      	bne.n	8002636 <HAL_RCC_OscConfig+0x76>
 8002628:	4b80      	ldr	r3, [pc, #512]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a7f      	ldr	r2, [pc, #508]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	e02e      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x98>
 800263e:	4b7b      	ldr	r3, [pc, #492]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a7a      	ldr	r2, [pc, #488]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b78      	ldr	r3, [pc, #480]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a77      	ldr	r2, [pc, #476]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e01d      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002660:	d10c      	bne.n	800267c <HAL_RCC_OscConfig+0xbc>
 8002662:	4b72      	ldr	r3, [pc, #456]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a71      	ldr	r2, [pc, #452]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b6f      	ldr	r3, [pc, #444]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6e      	ldr	r2, [pc, #440]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e00b      	b.n	8002694 <HAL_RCC_OscConfig+0xd4>
 800267c:	4b6b      	ldr	r3, [pc, #428]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a6a      	ldr	r2, [pc, #424]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	4b68      	ldr	r3, [pc, #416]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a67      	ldr	r2, [pc, #412]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 800268e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002692:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d013      	beq.n	80026c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7ff f86a 	bl	8001774 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a4:	f7ff f866 	bl	8001774 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e200      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	4b5d      	ldr	r3, [pc, #372]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0f0      	beq.n	80026a4 <HAL_RCC_OscConfig+0xe4>
 80026c2:	e014      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c4:	f7ff f856 	bl	8001774 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026cc:	f7ff f852 	bl	8001774 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b64      	cmp	r3, #100	; 0x64
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e1ec      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f0      	bne.n	80026cc <HAL_RCC_OscConfig+0x10c>
 80026ea:	e000      	b.n	80026ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d063      	beq.n	80027c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fa:	4b4c      	ldr	r3, [pc, #304]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002706:	4b49      	ldr	r3, [pc, #292]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d11c      	bne.n	800274c <HAL_RCC_OscConfig+0x18c>
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d116      	bne.n	800274c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271e:	4b43      	ldr	r3, [pc, #268]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <HAL_RCC_OscConfig+0x176>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d001      	beq.n	8002736 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e1c0      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4939      	ldr	r1, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274a:	e03a      	b.n	80027c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002754:	4b36      	ldr	r3, [pc, #216]	; (8002830 <HAL_RCC_OscConfig+0x270>)
 8002756:	2201      	movs	r2, #1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7ff f80b 	bl	8001774 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002762:	f7ff f807 	bl	8001774 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e1a1      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	4b2d      	ldr	r3, [pc, #180]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	00db      	lsls	r3, r3, #3
 800278e:	4927      	ldr	r1, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
 8002794:	e015      	b.n	80027c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002796:	4b26      	ldr	r3, [pc, #152]	; (8002830 <HAL_RCC_OscConfig+0x270>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe ffea 	bl	8001774 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a4:	f7fe ffe6 	bl	8001774 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e180      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1f0      	bne.n	80027a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d03a      	beq.n	8002844 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d019      	beq.n	800280a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_RCC_OscConfig+0x274>)
 80027d8:	2201      	movs	r2, #1
 80027da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027dc:	f7fe ffca 	bl	8001774 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e4:	f7fe ffc6 	bl	8001774 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e160      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_RCC_OscConfig+0x26c>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f0      	beq.n	80027e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002802:	2001      	movs	r0, #1
 8002804:	f000 faba 	bl	8002d7c <RCC_Delay>
 8002808:	e01c      	b.n	8002844 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_RCC_OscConfig+0x274>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002810:	f7fe ffb0 	bl	8001774 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002816:	e00f      	b.n	8002838 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe ffac 	bl	8001774 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d908      	bls.n	8002838 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e146      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	42420000 	.word	0x42420000
 8002834:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002838:	4b92      	ldr	r3, [pc, #584]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e9      	bne.n	8002818 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80a6 	beq.w	800299e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10d      	bne.n	800287e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	4a87      	ldr	r2, [pc, #540]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286c:	61d3      	str	r3, [r2, #28]
 800286e:	4b85      	ldr	r3, [pc, #532]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287a:	2301      	movs	r3, #1
 800287c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d118      	bne.n	80028bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288a:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a7e      	ldr	r2, [pc, #504]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 8002890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002896:	f7fe ff6d 	bl	8001774 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289e:	f7fe ff69 	bl	8001774 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b64      	cmp	r3, #100	; 0x64
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e103      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b0:	4b75      	ldr	r3, [pc, #468]	; (8002a88 <HAL_RCC_OscConfig+0x4c8>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x312>
 80028c4:	4b6f      	ldr	r3, [pc, #444]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4a6e      	ldr	r2, [pc, #440]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6213      	str	r3, [r2, #32]
 80028d0:	e02d      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x334>
 80028da:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	4a69      	ldr	r2, [pc, #420]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	f023 0301 	bic.w	r3, r3, #1
 80028e4:	6213      	str	r3, [r2, #32]
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	4a66      	ldr	r2, [pc, #408]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	6213      	str	r3, [r2, #32]
 80028f2:	e01c      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d10c      	bne.n	8002916 <HAL_RCC_OscConfig+0x356>
 80028fc:	4b61      	ldr	r3, [pc, #388]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	4a60      	ldr	r2, [pc, #384]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	6213      	str	r3, [r2, #32]
 8002908:	4b5e      	ldr	r3, [pc, #376]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	f043 0301 	orr.w	r3, r3, #1
 8002912:	6213      	str	r3, [r2, #32]
 8002914:	e00b      	b.n	800292e <HAL_RCC_OscConfig+0x36e>
 8002916:	4b5b      	ldr	r3, [pc, #364]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	4a5a      	ldr	r2, [pc, #360]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6213      	str	r3, [r2, #32]
 8002922:	4b58      	ldr	r3, [pc, #352]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a57      	ldr	r2, [pc, #348]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	f023 0304 	bic.w	r3, r3, #4
 800292c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d015      	beq.n	8002962 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7fe ff1d 	bl	8001774 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe ff19 	bl	8001774 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0b1      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	4b4b      	ldr	r3, [pc, #300]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ee      	beq.n	800293e <HAL_RCC_OscConfig+0x37e>
 8002960:	e014      	b.n	800298c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002962:	f7fe ff07 	bl	8001774 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7fe ff03 	bl	8001774 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e09b      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002980:	4b40      	ldr	r3, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ee      	bne.n	800296a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800298c:	7dfb      	ldrb	r3, [r7, #23]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d105      	bne.n	800299e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002992:	4b3c      	ldr	r3, [pc, #240]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 8087 	beq.w	8002ab6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a8:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 030c 	and.w	r3, r3, #12
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d061      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d146      	bne.n	8002a4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029bc:	4b33      	ldr	r3, [pc, #204]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe fed7 	bl	8001774 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ca:	f7fe fed3 	bl	8001774 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e06d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029dc:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f0:	d108      	bne.n	8002a04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4921      	ldr	r1, [pc, #132]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a19      	ldr	r1, [r3, #32]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	430b      	orrs	r3, r1
 8002a16:	491b      	ldr	r1, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7fe fea7 	bl	8001774 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7fe fea3 	bl	8001774 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e03d      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a3c:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x46a>
 8002a48:	e035      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_RCC_OscConfig+0x4cc>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fe fe90 	bl	8001774 <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a58:	f7fe fe8c 	bl	8001774 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e026      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x498>
 8002a76:	e01e      	b.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d107      	bne.n	8002a90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e019      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40007000 	.word	0x40007000
 8002a8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_OscConfig+0x500>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d001      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000

08002ac4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e0d0      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b67      	ldr	r3, [pc, #412]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	4965      	ldr	r1, [pc, #404]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b63      	ldr	r3, [pc, #396]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0b8      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d020      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d005      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b20:	4b59      	ldr	r3, [pc, #356]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b38:	4b53      	ldr	r3, [pc, #332]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b44:	4b50      	ldr	r3, [pc, #320]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	494d      	ldr	r1, [pc, #308]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d040      	beq.n	8002be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6a:	4b47      	ldr	r3, [pc, #284]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d115      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e07f      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d107      	bne.n	8002b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e073      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e06b      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba2:	4b39      	ldr	r3, [pc, #228]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f023 0203 	bic.w	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4936      	ldr	r1, [pc, #216]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7fe fdde 	bl	8001774 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7fe fdda 	bl	8001774 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e053      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd2:	4b2d      	ldr	r3, [pc, #180]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 020c 	and.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d1eb      	bne.n	8002bbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be4:	4b27      	ldr	r3, [pc, #156]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d210      	bcs.n	8002c14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 0207 	bic.w	r2, r3, #7
 8002bfa:	4922      	ldr	r1, [pc, #136]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b20      	ldr	r3, [pc, #128]	; (8002c84 <HAL_RCC_ClockConfig+0x1c0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e032      	b.n	8002c7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c20:	4b19      	ldr	r3, [pc, #100]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	4916      	ldr	r1, [pc, #88]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	490e      	ldr	r1, [pc, #56]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c52:	f000 f821 	bl	8002c98 <HAL_RCC_GetSysClockFreq>
 8002c56:	4602      	mov	r2, r0
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	5ccb      	ldrb	r3, [r1, r3]
 8002c66:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6a:	4a09      	ldr	r2, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1cc>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1d0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe fd3c 	bl	80016f0 <HAL_InitTick>

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40022000 	.word	0x40022000
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	080036bc 	.word	0x080036bc
 8002c90:	20000000 	.word	0x20000000
 8002c94:	20000004 	.word	0x20000004

08002c98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x30>
 8002cc2:	2b08      	cmp	r3, #8
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x36>
 8002cc6:	e027      	b.n	8002d18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cca:	613b      	str	r3, [r7, #16]
      break;
 8002ccc:	e027      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	0c9b      	lsrs	r3, r3, #18
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	4a17      	ldr	r2, [pc, #92]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cd8:	5cd3      	ldrb	r3, [r2, r3]
 8002cda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d010      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ce6:	4b11      	ldr	r3, [pc, #68]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0c5b      	lsrs	r3, r3, #17
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a0d      	ldr	r2, [pc, #52]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cfa:	fb03 f202 	mul.w	r2, r3, r2
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	e004      	b.n	8002d12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a0c      	ldr	r2, [pc, #48]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	613b      	str	r3, [r7, #16]
      break;
 8002d16:	e002      	b.n	8002d1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d1a:	613b      	str	r3, [r7, #16]
      break;
 8002d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d1e:	693b      	ldr	r3, [r7, #16]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	007a1200 	.word	0x007a1200
 8002d34:	080036d4 	.word	0x080036d4
 8002d38:	080036e4 	.word	0x080036e4
 8002d3c:	003d0900 	.word	0x003d0900

08002d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b02      	ldr	r3, [pc, #8]	; (8002d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr
 8002d50:	20000000 	.word	0x20000000

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d58:	f7ff fff2 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	0a1b      	lsrs	r3, r3, #8
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	080036cc 	.word	0x080036cc

08002d7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <RCC_Delay+0x34>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <RCC_Delay+0x38>)
 8002d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8e:	0a5b      	lsrs	r3, r3, #9
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	fb02 f303 	mul.w	r3, r2, r3
 8002d96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d98:	bf00      	nop
  }
  while (Delay --);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1e5a      	subs	r2, r3, #1
 8002d9e:	60fa      	str	r2, [r7, #12]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f9      	bne.n	8002d98 <RCC_Delay+0x1c>
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	20000000 	.word	0x20000000
 8002db4:	10624dd3 	.word	0x10624dd3

08002db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e076      	b.n	8002eb8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d108      	bne.n	8002de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dda:	d009      	beq.n	8002df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	61da      	str	r2, [r3, #28]
 8002de2:	e005      	b.n	8002df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fbba 	bl	8001584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e74:	ea42 0103 	orr.w	r1, r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	0c1a      	lsrs	r2, r3, #16
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f002 0204 	and.w	r2, r2, #4
 8002e96:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_SPI_Transmit+0x22>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e12d      	b.n	800313e <HAL_SPI_Transmit+0x27e>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eea:	f7fe fc43 	bl	8001774 <HAL_GetTick>
 8002eee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d002      	beq.n	8002f06 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
 8002f02:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f04:	e116      	b.n	8003134 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_SPI_Transmit+0x52>
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d102      	bne.n	8002f18 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002f16:	e10d      	b.n	8003134 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	88fa      	ldrh	r2, [r7, #6]
 8002f30:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	88fa      	ldrh	r2, [r7, #6]
 8002f36:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f5e:	d10f      	bne.n	8002f80 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f6e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8a:	2b40      	cmp	r3, #64	; 0x40
 8002f8c:	d007      	beq.n	8002f9e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa6:	d14f      	bne.n	8003048 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_SPI_Transmit+0xf6>
 8002fb0:	8afb      	ldrh	r3, [r7, #22]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d142      	bne.n	800303c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	881a      	ldrh	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	1c9a      	adds	r2, r3, #2
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002fda:	e02f      	b.n	800303c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d112      	bne.n	8003010 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	881a      	ldrh	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	1c9a      	adds	r2, r3, #2
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	86da      	strh	r2, [r3, #54]	; 0x36
 800300e:	e015      	b.n	800303c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003010:	f7fe fbb0 	bl	8001774 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d803      	bhi.n	8003028 <HAL_SPI_Transmit+0x168>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003026:	d102      	bne.n	800302e <HAL_SPI_Transmit+0x16e>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800303a:	e07b      	b.n	8003134 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1ca      	bne.n	8002fdc <HAL_SPI_Transmit+0x11c>
 8003046:	e050      	b.n	80030ea <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_SPI_Transmit+0x196>
 8003050:	8afb      	ldrh	r3, [r7, #22]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d144      	bne.n	80030e0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	330c      	adds	r3, #12
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800307c:	e030      	b.n	80030e0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b02      	cmp	r3, #2
 800308a:	d113      	bne.n	80030b4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	330c      	adds	r3, #12
 8003096:	7812      	ldrb	r2, [r2, #0]
 8003098:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80030b2:	e015      	b.n	80030e0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b4:	f7fe fb5e 	bl	8001774 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d803      	bhi.n	80030cc <HAL_SPI_Transmit+0x20c>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ca:	d102      	bne.n	80030d2 <HAL_SPI_Transmit+0x212>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d106      	bne.n	80030e0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80030de:	e029      	b.n	8003134 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1c9      	bne.n	800307e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa62 	bl	80035b8 <SPI_EndRxTxTransaction>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003108:	2300      	movs	r3, #0
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	613b      	str	r3, [r7, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e003      	b.n	8003134 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800313c:	7ffb      	ldrb	r3, [r7, #31]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b08c      	sub	sp, #48	; 0x30
 800314a:	af00      	add	r7, sp, #0
 800314c:	60f8      	str	r0, [r7, #12]
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003154:	2301      	movs	r3, #1
 8003156:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003164:	2b01      	cmp	r3, #1
 8003166:	d101      	bne.n	800316c <HAL_SPI_TransmitReceive+0x26>
 8003168:	2302      	movs	r3, #2
 800316a:	e198      	b.n	800349e <HAL_SPI_TransmitReceive+0x358>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003174:	f7fe fafe 	bl	8001774 <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003180:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800318a:	887b      	ldrh	r3, [r7, #2]
 800318c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800318e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003192:	2b01      	cmp	r3, #1
 8003194:	d00f      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0x70>
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800319c:	d107      	bne.n	80031ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d103      	bne.n	80031ae <HAL_SPI_TransmitReceive+0x68>
 80031a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d003      	beq.n	80031b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
 80031b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031b4:	e16d      	b.n	8003492 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d005      	beq.n	80031c8 <HAL_SPI_TransmitReceive+0x82>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_TransmitReceive+0x82>
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d103      	bne.n	80031d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031ce:	e160      	b.n	8003492 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d003      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2205      	movs	r2, #5
 80031e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	887a      	ldrh	r2, [r7, #2]
 80031fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	887a      	ldrh	r2, [r7, #2]
 8003206:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	887a      	ldrh	r2, [r7, #2]
 800320c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d007      	beq.n	8003238 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003236:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003240:	d17c      	bne.n	800333c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_SPI_TransmitReceive+0x10a>
 800324a:	8b7b      	ldrh	r3, [r7, #26]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d16a      	bne.n	8003326 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	881a      	ldrh	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003274:	e057      	b.n	8003326 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b02      	cmp	r3, #2
 8003282:	d11b      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x176>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <HAL_SPI_TransmitReceive+0x176>
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d113      	bne.n	80032bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	881a      	ldrh	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	1c9a      	adds	r2, r3, #2
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d119      	bne.n	80032fe <HAL_SPI_TransmitReceive+0x1b8>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d014      	beq.n	80032fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032de:	b292      	uxth	r2, r2
 80032e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	1c9a      	adds	r2, r3, #2
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032fa:	2301      	movs	r3, #1
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032fe:	f7fe fa39 	bl	8001774 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800330a:	429a      	cmp	r2, r3
 800330c:	d80b      	bhi.n	8003326 <HAL_SPI_TransmitReceive+0x1e0>
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d007      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003324:	e0b5      	b.n	8003492 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1a2      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x130>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d19d      	bne.n	8003276 <HAL_SPI_TransmitReceive+0x130>
 800333a:	e080      	b.n	800343e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <HAL_SPI_TransmitReceive+0x204>
 8003344:	8b7b      	ldrh	r3, [r7, #26]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d16f      	bne.n	800342a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	7812      	ldrb	r2, [r2, #0]
 8003356:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003370:	e05b      	b.n	800342a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d11c      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x274>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d017      	beq.n	80033ba <HAL_SPI_TransmitReceive+0x274>
 800338a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d114      	bne.n	80033ba <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	330c      	adds	r3, #12
 800339a:	7812      	ldrb	r2, [r2, #0]
 800339c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d119      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x2b6>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d014      	beq.n	80033fc <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033f8:	2301      	movs	r3, #1
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033fc:	f7fe f9ba 	bl	8001774 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003408:	429a      	cmp	r2, r3
 800340a:	d803      	bhi.n	8003414 <HAL_SPI_TransmitReceive+0x2ce>
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d102      	bne.n	800341a <HAL_SPI_TransmitReceive+0x2d4>
 8003414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003416:	2b00      	cmp	r3, #0
 8003418:	d107      	bne.n	800342a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003428:	e033      	b.n	8003492 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d19e      	bne.n	8003372 <HAL_SPI_TransmitReceive+0x22c>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d199      	bne.n	8003372 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800343e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003440:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f8b8 	bl	80035b8 <SPI_EndRxTxTransaction>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800345a:	e01a      	b.n	8003492 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003488:	e003      	b.n	8003492 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800349a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3730      	adds	r7, #48	; 0x30
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034b8:	f7fe f95c 	bl	8001774 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	4413      	add	r3, r2
 80034c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034c8:	f7fe f954 	bl	8001774 <HAL_GetTick>
 80034cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034ce:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	015b      	lsls	r3, r3, #5
 80034d4:	0d1b      	lsrs	r3, r3, #20
 80034d6:	69fa      	ldr	r2, [r7, #28]
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034de:	e054      	b.n	800358a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d050      	beq.n	800358a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034e8:	f7fe f944 	bl	8001774 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d902      	bls.n	80034fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d13d      	bne.n	800357a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800350c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003516:	d111      	bne.n	800353c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003520:	d004      	beq.n	800352c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352a:	d107      	bne.n	800353c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003544:	d10f      	bne.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003564:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e017      	b.n	80035aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	3b01      	subs	r3, #1
 8003588:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d19b      	bne.n	80034e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000000 	.word	0x20000000

080035b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af02      	add	r7, sp, #8
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f7ff ff6a 	bl	80034a8 <SPI_WaitFlagStateUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035de:	f043 0220 	orr.w	r2, r3, #32
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e000      	b.n	80035ec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <memset>:
 80035f4:	4603      	mov	r3, r0
 80035f6:	4402      	add	r2, r0
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d100      	bne.n	80035fe <memset+0xa>
 80035fc:	4770      	bx	lr
 80035fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003602:	e7f9      	b.n	80035f8 <memset+0x4>

08003604 <__libc_init_array>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	2600      	movs	r6, #0
 8003608:	4d0c      	ldr	r5, [pc, #48]	; (800363c <__libc_init_array+0x38>)
 800360a:	4c0d      	ldr	r4, [pc, #52]	; (8003640 <__libc_init_array+0x3c>)
 800360c:	1b64      	subs	r4, r4, r5
 800360e:	10a4      	asrs	r4, r4, #2
 8003610:	42a6      	cmp	r6, r4
 8003612:	d109      	bne.n	8003628 <__libc_init_array+0x24>
 8003614:	f000 f81a 	bl	800364c <_init>
 8003618:	2600      	movs	r6, #0
 800361a:	4d0a      	ldr	r5, [pc, #40]	; (8003644 <__libc_init_array+0x40>)
 800361c:	4c0a      	ldr	r4, [pc, #40]	; (8003648 <__libc_init_array+0x44>)
 800361e:	1b64      	subs	r4, r4, r5
 8003620:	10a4      	asrs	r4, r4, #2
 8003622:	42a6      	cmp	r6, r4
 8003624:	d105      	bne.n	8003632 <__libc_init_array+0x2e>
 8003626:	bd70      	pop	{r4, r5, r6, pc}
 8003628:	f855 3b04 	ldr.w	r3, [r5], #4
 800362c:	4798      	blx	r3
 800362e:	3601      	adds	r6, #1
 8003630:	e7ee      	b.n	8003610 <__libc_init_array+0xc>
 8003632:	f855 3b04 	ldr.w	r3, [r5], #4
 8003636:	4798      	blx	r3
 8003638:	3601      	adds	r6, #1
 800363a:	e7f2      	b.n	8003622 <__libc_init_array+0x1e>
 800363c:	080036e8 	.word	0x080036e8
 8003640:	080036e8 	.word	0x080036e8
 8003644:	080036e8 	.word	0x080036e8
 8003648:	080036ec 	.word	0x080036ec

0800364c <_init>:
 800364c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364e:	bf00      	nop
 8003650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003652:	bc08      	pop	{r3}
 8003654:	469e      	mov	lr, r3
 8003656:	4770      	bx	lr

08003658 <_fini>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr
